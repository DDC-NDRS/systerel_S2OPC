/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

REFINEMENT
    session_role_identity_eval_r

REFINES
    session_role_identity_eval

SEES
    constants

DEFINITIONS
    d_variables_identity ==
        a_identity_criteriaType,
        a_identity_criteria
    ;

    d_variables_user ==
        s_user_anonymous,
        s_user_username,
        a_username
    ;

    d_inv_user ==
        (s_user_anonymous <: t_user &
         s_user_username <: t_user &
         s_user_anonymous /\ s_user_username = {} &
         a_username : s_user_username --> t_Criteria)
    ;

    d_inv_identity ==
        (a_identity_criteriaType : t_Identity --> t_CriteriaType_i &
         a_identity_criteria : t_Identity --> t_Criteria)
    ;

    d_init_user ==
        d_inv_user;

    d_init_identity ==
        d_inv_identity;

    d_user_identity_match ==
        ((a_identity_criteriaType(p_identity) = e_CriteriaType_anonymous) or
        (a_identity_criteriaType(p_identity) = e_CriteriaType_authenticatedUser & p_user /: s_user_anonymous) or
        (a_identity_criteriaType(p_identity) = e_CriteriaType_username & p_user : s_user_username &
            a_username(p_user) = a_identity_criteria(p_identity)))

ABSTRACT_VARIABLES
    d_variables_user,
    d_variables_identity

INVARIANT
    d_inv_user &
    d_inv_identity &
    a_user_identity_match = {p_user, p_identity | p_user : t_user & p_identity : t_Identity & d_user_identity_match}

INITIALISATION
    d_variables_user : (d_init_user) ||
    d_variables_identity : (d_init_identity)

OPERATIONS
    p_bres <-- user_and_identity_match(p_user, p_identity) =
    PRE
        p_user : t_user_i &
        p_user : t_user &
        p_identity : t_Identity
    THEN
        p_bres := bool(d_user_identity_match)
    END
END
