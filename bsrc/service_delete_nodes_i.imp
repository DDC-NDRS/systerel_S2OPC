/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_delete_nodes_i

REFINES
    service_delete_nodes

SEES
    constants,
    constants_statuscodes_bs,
    message_in_bs,
    message_out_bs

DEFINITIONS
    "address_space.def"

IMPORTS
    msg_node_management_delete_nodes,
    node_management_delete_nodes_items_it,
    service_add_nodes

/* Note: We would like to use EXTENDS instead of IMPORTS + PROMOTES,
   but it would trigger a bug in the project check. */

PROMOTES
    treat_add_nodes_request,
    treat_write_request,
    treat_method_call_request,

    address_space_UNINITIALISATION,
    is_mandatory_attribute,
    is_AddressSpace_constant,
    read_Node_Attribute,
    read_AddressSpace_Identities_value,
    readall_AddressSpace_Node,
    get_NodeClass,
    get_BrowseName,
    get_DisplayName,
    is_transitive_subtype,
    is_valid_ReferenceTypeId,
    is_NodeId_equal,
    get_TypeDefinition,
    get_Reference_ReferenceType,
    get_Reference_TargetNode,
    get_Reference_IsForward,
    get_Node_RefIndexEnd,
    get_RefIndex_Reference,
    get_Value_StatusCode,
    read_AddressSpace_clear_value,
    read_AddressSpace_free_variant,
    is_local_service_treatment,
    set_local_service_treatment,
    get_user_authorization,
    set_user_roles,
    get_user_roles,
    clear_user_roles,
    has_access_level_histRead,
    has_access_level_executable,
    get_EventNotifier,
    get_InputArguments,
    get_conv_Variant_ValueRank,
    get_conv_Variant_Type,
    read_variable_compat_type,
    check_object_has_method,
    check_nodeId_isValid,
    is_IndexRangeDefined

LOCAL_OPERATIONS

    local_treat_delete_nodes_index(p_user, p_req_msg, p_resp_msg, p_index) =
    PRE
        p_user : t_user_i &
        p_user : t_user   &
        p_req_msg : t_msg_i  &
        p_req_msg = c_msg_in &
        c_msg_in : t_msg         &
        a_msg_in_type = e_msg_node_add_nodes_req &
        p_resp_msg : t_msg_i   &
        p_resp_msg = c_msg_out &
        c_msg_out : t_msg &
        a_msg_out_type = e_msg_node_add_nodes_resp &
        p_index : NAT &
        p_index > 0 &
        p_index <= nb_nodes_to_delete &
        p_index : t_nodeToDeleteReqIndex &
        p_index /: dom(DeleteNodeItemResp_StatusCode)
    THEN
        d_adsp_nodes_variables,
        DeleteNodeItemResp_StatusCode
        :(d_adsp_nodes_invariant &
            DeleteNodeItemResp_StatusCode : t_nodeToAddReqIndex +-> t_StatusCode &
            DeleteNodeItemResp_StatusCode$0 = {p_index} <<| DeleteNodeItemResp_StatusCode &
            p_index : dom(DeleteNodeItemResp_StatusCode)
        )
    END
    ;

    local_treat_delete_nodes_items(p_user, p_req_msg, p_resp_msg, p_nb_nodes_to_add) =
    PRE
        p_user : t_user_i        &
        p_user : t_user          &
        p_req_msg : t_msg_i  &
        p_req_msg = c_msg_in &
        c_msg_in : t_msg         &
        a_msg_in_type = e_msg_node_add_nodes_req &
        p_resp_msg : t_msg_i   &
        p_resp_msg = c_msg_out &
        c_msg_out : t_msg &
        a_msg_out_type = e_msg_node_add_nodes_resp &
        DeleteNodeItemResp_Allocated = TRUE &
        p_nb_nodes_to_add : NAT &
        p_nb_nodes_to_add : t_nodeToAddReqIndex &
        p_nb_nodes_to_add = nb_nodes_to_delete
    THEN
        d_adsp_nodes_variables,
        DeleteNodeItemResp_StatusCode
        :(d_adsp_nodes_invariant &
            DeleteNodeItemResp_StatusCode  : 1..nb_nodes_to_delete --> t_StatusCode
        )
    END

OPERATIONS

    /* LOCAL_OPERATIONS */

    local_treat_delete_nodes_index(p_user, p_req_msg, p_resp_msg, p_index) =
    VAR
        l_sc,
        l_nodeId,
        l_b_deleteTargetReferences,
        l_local_treatment,
        l_authorized_delete_node,
        l_roles
    IN
        l_nodeId, l_b_deleteTargetReferences <-- getall_delete_node_item_req_params (p_req_msg, p_index);
        l_sc := e_sc_ok;
        l_local_treatment <-- is_local_service_treatment;
        IF l_local_treatment = FALSE
        THEN
            l_roles <-- get_user_roles(p_user);
            l_authorized_delete_node <-- get_user_authorization(e_operation_type_deletenode, l_nodeId, e_aid_NodeId, p_user, l_roles);
            IF l_authorized_delete_node = FALSE
            THEN
                l_sc := e_sc_bad_user_access_denied
            END
        END // ELSE always authorized
        ;
        IF l_sc = e_sc_ok
        THEN
            l_sc <-- deleteNode_AddressSpace(l_nodeId, l_b_deleteTargetReferences)
        END
        ;
        setall_msg_delete_nodes_item_resp_params (p_resp_msg, p_index, l_sc)
    END
    ;

    local_treat_delete_nodes_items(p_user, p_req_msg, p_resp_msg, p_nb_nodes_to_add) =
    VAR
        l_continue,
        l_index
    IN
        l_continue <-- init_iter_delete_nodes_items(p_nb_nodes_to_add);
        WHILE l_continue = TRUE DO
            l_continue, l_index <-- continue_iter_delete_nodes_items;
            local_treat_delete_nodes_index(p_user, p_req_msg, p_resp_msg, l_index)
        INVARIANT
            rreqs_to_iterate <: t_nodeToAddReqIndex &
            rreqs_iterated   <: t_nodeToAddReqIndex &
            rreqs_to_iterate /\ rreqs_iterated = {} &
            rreqs_to_iterate \/ rreqs_iterated = 1..nb_nodes_to_delete &
            l_continue = bool(rreqs_to_iterate /= {}) &
            rreqs_iterated = dom(DeleteNodeItemResp_StatusCode)
        VARIANT
            card(rreqs_to_iterate)
        END
    END
    ;

    /* OPERATIONS */

    StatusCode_service <-- treat_delete_nodes_request(p_user, p_req_msg, p_resp_msg) =
    VAR
        l_sc,
        l_nb_nodes_to_delete,
        l_bres
    IN
        StatusCode_service := e_sc_ok;
        l_bres <-- is_AddressSpace_constant;
        IF l_bres = FALSE
        THEN
            l_sc, l_nb_nodes_to_delete <-- getall_msg_delete_nodes_req_params (p_req_msg);
            IF l_sc = e_sc_ok
            THEN
                l_bres <-- alloc_msg_delete_nodes_resp_results (p_resp_msg, l_nb_nodes_to_delete);
                IF l_bres = TRUE
                THEN
                    local_treat_delete_nodes_items(p_user, p_req_msg, p_resp_msg, l_nb_nodes_to_delete)
                ELSE
                    StatusCode_service := e_sc_bad_out_of_memory
                END
            ELSE
                StatusCode_service := l_sc
            END
        ELSE
            StatusCode_service := e_sc_bad_service_unsupported
        END
    END
END
