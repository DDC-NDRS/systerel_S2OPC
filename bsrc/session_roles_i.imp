/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    session_roles_i

REFINES
    session_roles

IMPORTS
    roleset_references_it,
    session_role_eval,
    session_roles_granted_bs

SEES
    constants,
    constants_statuscodes_bs,
    address_space_itf

DEFINITIONS
    d_var_reference_it ==
        starting_node,
        references_to_iterate,
        references_iterated,
        next_reference_index
    ;

OPERATIONS

    /* Operation of the module */
    p_roles <-- compute_user_roles(p_user) =
    VAR
        l_nid_valid,
        l_roleSet_node,
        l_continue,
        l_ref,
        l_bValidRoleRef,
        l_maybe_role_node,
        l_maybe_role_nodeId,
        l_bres
    IN
        p_roles := c_sessionRoles_empty;
        /* Get the server RoleSet node */
        l_nid_valid, l_roleSet_node <-- readall_AddressSpace_Node(c_Server_ServerCapabilities_RoleSet_NodeId);
        IF l_nid_valid = TRUE THEN
            /* Allocate the C object that will contain the granted roles */
            initialize_session_roles;
            /* Initialize the iterator on the RoleSet's references */
            l_continue <-- init_iter_roleset_references(l_roleSet_node);
            WHILE
                l_continue = TRUE
            DO
                /* Get the next reference of the RoleSet node */
                l_continue, l_ref <-- continue_iter_roleset_references;
                l_bValidRoleRef, l_maybe_role_node, l_maybe_role_nodeId <-- is_ref_role(l_ref);
                IF l_bValidRoleRef = TRUE THEN
                    /* Evaluate if the role should be granted to user */
                    l_bres <-- role_eval_user(p_user, l_maybe_role_node);
                    IF l_bres = TRUE THEN
                        add_role_to_session(l_maybe_role_nodeId)
                    END
                END
            INVARIANT
                /* Invariant of iteration on references of RoleSet node */
                references_to_iterate <: t_Reference &
                references_iterated   <: t_Reference &
                references_to_iterate /\ references_iterated = {} &
                references_to_iterate \/ references_iterated = a_Node_References &
                starting_node = l_roleSet_node &
                a_Node_References = ran({starting_node} * (1.. Node_RefIndexEnd(starting_node)) <| RefIndex_Reference) &
                s_sessionRoles = { roleNodeId | roleNodeId : t_NodeId &
                    // the nodeId is a role ref
                    roleNodeId : conv_ExpandedNodeId_NodeId[Reference_TargetNode[(references_iterated /\ s_role_node_refs)]] &
                    // the user and the role match
                    (p_user |-> a_NodeId~(roleNodeId)) : a_user_role_match
                }
            VARIANT
                card(references_to_iterate)
            END;
            p_roles <-- pop_session_roles
        END
    END

END
