/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    namespace_default_role_permissions_value_i

REFINES
    namespace_default_role_permissions_value

SEES
    constants,
    address_space_bs

EXTENDS
    namespace_default_role_permissions_value_bs

LOCAL_OPERATIONS
    // Get the node targetted by the ref
    p_node, p_nodeId <-- l_ref_get_node(p_ref) =
    PRE
        p_ref : t_Reference_i &
        p_ref : t_Reference
    THEN
        p_node,
        p_nodeId :(p_node : t_Node_i &
                   p_nodeId : t_NodeId_i &
                   (p_nodeId : t_NodeId => p_node |-> p_nodeId : a_NodeId &
                                              p_nodeId = conv_ExpandedNodeId_NodeId(Reference_TargetNode(p_ref))) &
                      (p_nodeId = c_NodeId_indet => p_node = c_Node_indet))
    END

OPERATIONS
    /* LOCAL OPERATIONS    */
    p_node, p_nodeId <-- l_ref_get_node(p_ref) =
    VAR
        l_ref_target,
        l_local_server,
        l_ref_target_NodeId,
        l_isvalid,
        l_ref_target_Node
    IN
        p_node := c_Node_indet;
        p_nodeId := c_NodeId_indet;
        l_ref_target <-- get_Reference_TargetNode(p_ref);
        l_local_server, l_ref_target_NodeId <-- getall_conv_ExpandedNodeId_NodeId(l_ref_target);
        IF l_local_server = TRUE
        THEN
            l_isvalid, l_ref_target_Node <-- readall_AddressSpace_Node(l_ref_target_NodeId);
            IF l_isvalid = TRUE
            THEN
                p_node := l_ref_target_Node;
                p_nodeId := l_ref_target_NodeId
            END
        END
    END
    ;

    /* OPERATION OF THE MODULE */
    p_maybe_val_DefaultRolePermissions <-- ref_maybe_get_DefaultRolePermissions(p_ref) =
    VAR
        l_ref_target_Node,
        l_ref_target_NodeId,
        l_NodeClass,
        l_browseName,
        l_browseName_comparison,
        l_sc,
        l_val_DefaultRolePermissions,
        l_val_sc,
        l_val_ts_src,
        l_DefaultRolePermissions
    IN
        p_maybe_val_DefaultRolePermissions := c_RolePermissionTypes_indet;
        l_ref_target_Node, l_ref_target_NodeId <-- l_ref_get_node(p_ref);
        l_NodeClass <-- get_NodeClass(l_ref_target_Node);
        IF l_NodeClass = e_ncl_Variable THEN
            l_browseName <-- get_BrowseName(l_ref_target_Node);
            l_browseName_comparison <-- is_QualifiedNames_Equal(l_browseName, c_DefaultRolePermissions_QualifiedName);
            IF l_browseName_comparison = TRUE THEN
                l_sc, l_val_DefaultRolePermissions, l_val_sc, l_val_ts_src
                    <-- read_AddressSpace_Raw_Node_Value_value(l_ref_target_Node, l_ref_target_NodeId, e_aid_Value);
                l_DefaultRolePermissions <-- get_conv_Variant_RolePermissionTypes(l_val_DefaultRolePermissions);
                p_maybe_val_DefaultRolePermissions := l_DefaultRolePermissions
            END
        END
    END
END
