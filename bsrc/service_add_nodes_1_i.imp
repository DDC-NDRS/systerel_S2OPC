/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_add_nodes_1_i

REFINES
    service_add_nodes_1_r

SEES
    constants,
    constants_statuscodes_bs,
    node_id_pointer_bs,
    message_in_bs,
    message_out_bs,
    msg_node_management_add_nodes

IMPORTS
    call_method_mgr,
    address_space_namespaces_indexes

/* Note: We would like to use EXTENDS instead of IMPORTS + PROMOTES,
   but it would trigger a bug in the project check. */

PROMOTES
    treat_write_request,
    treat_method_call_request,

    address_space_UNINITIALISATION,
    is_mandatory_attribute,
    is_AddressSpace_constant,
    read_Node_Attribute,
    read_AddressSpace_Identities_value,
    readall_AddressSpace_Node,
    get_NodeClass,
    get_BrowseName,
    get_DisplayName,
    is_transitive_subtype,
    is_valid_ReferenceTypeId,
    is_NodeId_equal,
    get_TypeDefinition,
    get_Reference_ReferenceType,
    get_Reference_TargetNode,
    get_Reference_IsForward,
    get_Node_RefIndexEnd,
    get_RefIndex_Reference,
    get_Value_StatusCode,
    read_AddressSpace_clear_value,
    read_AddressSpace_free_variant,
    is_local_service_treatment,
    set_local_service_treatment,
    get_user_authorization,
    set_user_roles,
    get_user_roles,
    clear_user_roles,
    has_access_level_executable,
    get_EventNotifier,
    get_InputArguments,
    get_conv_Variant_ValueRank,
    get_conv_Variant_Type,
    read_variable_compat_type,
    check_object_has_method,
    check_nodeId_isValid,
    is_IndexRangeDefined,

    deleteNode_AddressSpace

LOCAL_OPERATIONS

    /* Checks if the given NS index is defined in the server NamespacesArray.
       This operation may update the number of namespaces in cache. */
    bres <-- has_NamespaceIndex(p_idx) =
    PRE
        p_idx : t_NamespaceIdx
    THEN
        bres, a_nsIdxMax
        :(a_nsIdxMax : t_NamespaceIdx &
          bres : BOOL &
          bres = bool(cast_t_NamespaceIdx~(p_idx) <= cast_t_NamespaceIdx~(a_nsIdxMax))
        )
    END
    ;

    sc_operation <-- check_add_nodes_item_params_parent_nid(p_parentNid) =
    PRE
        p_parentNid : t_ExpandedNodeId_i &
        p_parentNid : t_ExpandedNodeId
    THEN
        sc_operation
        :(
            sc_operation : t_StatusCode_i &
            /* Parent node is valid */
            (p_parentNid : dom(conv_ExpandedNodeId_NodeId) &
             conv_ExpandedNodeId_NodeId(p_parentNid) : ran(a_NodeId) =>
             sc_operation = e_sc_ok) &
            (not(p_parentNid : dom(conv_ExpandedNodeId_NodeId) &
                 conv_ExpandedNodeId_NodeId(p_parentNid) : ran(a_NodeId)) =>
             sc_operation = e_sc_bad_parent_node_id_invalid)
        )
    END
    ;

    sc_operation <-- check_add_nodes_item_params_ref_type (p_refTypeId, p_sc_operation) =
    PRE
        p_refTypeId : t_NodeId_i &
        p_refTypeId : t_NodeId &
        p_sc_operation : t_StatusCode_i &
        p_sc_operation : t_StatusCode
    THEN
        sc_operation
        :(
            sc_operation : t_StatusCode_i &
            (p_sc_operation = e_sc_ok =>
                (p_refTypeId : Type_IsReferenceTypeIdValid & p_refTypeId |-> c_HierarchicalReferences_Type_NodeId : Type_IsTransitiveSubtype
                    => sc_operation = e_sc_ok) &
                (not(p_refTypeId : Type_IsReferenceTypeIdValid & p_refTypeId |-> c_HierarchicalReferences_Type_NodeId : Type_IsTransitiveSubtype )
                    => sc_operation = e_sc_bad_reference_type_id_invalid)) &
            (not(p_sc_operation = e_sc_ok) => sc_operation = p_sc_operation)
        )
    END
    ;

    sc_operation <-- check_add_nodes_item_params_type_def (p_nodeClass, p_typeDefId, p_sc_operation) =
    PRE
        p_nodeClass : t_NodeClass_i &
        p_nodeClass : t_NodeClass &
        p_typeDefId : t_ExpandedNodeId_i &
        (p_nodeClass :{e_ncl_Object, e_ncl_Variable} => p_typeDefId : t_ExpandedNodeId) &
        p_sc_operation : t_StatusCode_i &
        p_sc_operation : t_StatusCode
    THEN
        sc_operation
        :(
            sc_operation : t_StatusCode_i &
            (p_sc_operation = e_sc_ok =>
                (p_nodeClass : {e_ncl_Object, e_ncl_Variable} =>
                    /* NodeId is valid in address space and node class is correct as a type for new node */
                    (p_typeDefId : dom(conv_ExpandedNodeId_NodeId) &
                        conv_ExpandedNodeId_NodeId(p_typeDefId) : ran(a_NodeId) &
                        ((p_nodeClass = e_ncl_Object & a_NodeClass(a_NodeId~(conv_ExpandedNodeId_NodeId(p_typeDefId))) = e_ncl_ObjectType) or
                            (p_nodeClass = e_ncl_Variable & a_NodeClass(a_NodeId~(conv_ExpandedNodeId_NodeId(p_typeDefId))) = e_ncl_VariableType))
                        => sc_operation = e_sc_ok) &
                    (not(p_typeDefId : dom(conv_ExpandedNodeId_NodeId) &
                            conv_ExpandedNodeId_NodeId(p_typeDefId) : ran(a_NodeId) &
                            ((p_nodeClass = e_ncl_Object & a_NodeClass(a_NodeId~(conv_ExpandedNodeId_NodeId(p_typeDefId))) = e_ncl_ObjectType) or
                                (p_nodeClass = e_ncl_Variable & a_NodeClass(a_NodeId~(conv_ExpandedNodeId_NodeId(p_typeDefId))) = e_ncl_VariableType)))
                        => sc_operation = e_sc_bad_type_definition_invalid)
                )
            ) &
            (not (p_sc_operation = e_sc_ok) => sc_operation = p_sc_operation)
        )
    END
    ;

    sc_operation, new_nid <-- check_add_nodes_item_params_req_node_id (p_reqNodeId, p_sc_operation) =
    PRE
        p_reqNodeId : t_ExpandedNodeId_i &
        p_sc_operation : t_StatusCode_i &
        p_sc_operation : t_StatusCode
    THEN
        sc_operation,
        new_nid,
        a_nsIdxMax
        :(
            sc_operation : t_StatusCode_i &
            new_nid : t_NodeId_i &
            a_nsIdxMax : t_NamespaceIdx &
            (p_sc_operation = e_sc_ok =>
                (p_reqNodeId : t_ExpandedNodeId =>
                    ((p_reqNodeId : dom(conv_ExpandedNodeId_NodeId) & conv_ExpandedNodeId_NodeId(p_reqNodeId) /: ran(a_NodeId) &
                            cast_t_NamespaceIdx~(conv_NodeId_NamespaceIdx(conv_ExpandedNodeId_NodeId(p_reqNodeId))) <= cast_t_NamespaceIdx~(a_nsIdxMax)) =>
                        new_nid = conv_ExpandedNodeId_NodeId(p_reqNodeId) & sc_operation = e_sc_ok) &
                    /* Not a local server node id */
                    (not(p_reqNodeId : dom(conv_ExpandedNodeId_NodeId)) => sc_operation = e_sc_bad_node_id_rejected) &
                    /* Not a local server valid namespace index */
                    ((p_reqNodeId : dom(conv_ExpandedNodeId_NodeId) & not(cast_t_NamespaceIdx~(conv_NodeId_NamespaceIdx(conv_ExpandedNodeId_NodeId(p_reqNodeId))) <= cast_t_NamespaceIdx~(a_nsIdxMax)))
                        => sc_operation = e_sc_bad_node_id_rejected) &
                    /* Already used local server node id */
                    ((p_reqNodeId : dom(conv_ExpandedNodeId_NodeId) & cast_t_NamespaceIdx~(conv_NodeId_NamespaceIdx(conv_ExpandedNodeId_NodeId(p_reqNodeId))) <= cast_t_NamespaceIdx~(a_nsIdxMax) &
                            not(conv_ExpandedNodeId_NodeId(p_reqNodeId) /: ran(a_NodeId))) =>
                        sc_operation = e_sc_bad_node_id_exists)
                ) &
                (not (p_reqNodeId : t_ExpandedNodeId) =>
                    (new_nid = c_NodeId_indet => sc_operation = e_sc_bad_out_of_memory) &
                    (new_nid /= c_NodeId_indet =>
                        new_nid : t_NodeId & new_nid /: ran(a_NodeId) & sc_operation = e_sc_ok)
                )
            ) &
            (not (p_sc_operation = e_sc_ok) => sc_operation = p_sc_operation)
        )
    END
    ;

    sc_operation, new_nid <-- check_add_nodes_item_params
      (p_parentNid, p_refTypeId, p_reqNodeId, p_nodeClass, p_typeDefId) =
    PRE
        p_parentNid : t_ExpandedNodeId_i &
        p_parentNid : t_ExpandedNodeId &
        p_refTypeId : t_NodeId_i &
        p_refTypeId : t_NodeId &
        p_reqNodeId : t_ExpandedNodeId_i &
        p_nodeClass : t_NodeClass_i &
        p_nodeClass : t_NodeClass &
        p_typeDefId : t_ExpandedNodeId_i &
        (p_nodeClass :{e_ncl_Object, e_ncl_Variable} => p_typeDefId : t_ExpandedNodeId)
    THEN
        sc_operation,
        new_nid
        :(
            sc_operation : t_StatusCode_i &
            sc_operation : {e_sc_ok,
                            e_sc_bad_parent_node_id_invalid,
                            e_sc_bad_reference_type_id_invalid,
                            /* e_sc_bad_reference_not_allowed, => checked in address_space_bs depending on node classes */
                            e_sc_bad_node_id_rejected,
                            e_sc_bad_node_id_exists,
                            /* bad_node_class_invalid => already checked */
                            /* e_sc_bad_browse_name_invalid => already checked */
                            /* e_sc_bad_browse_name_duplicated, => checked in address_space_bs (browse service not accessible here) */
                            /* bad_node_attributes_invalid => already checked */
                            e_sc_bad_type_definition_invalid,
                            e_sc_bad_out_of_memory }  &
            new_nid : t_NodeId_i &
            (sc_operation = e_sc_ok =>
                /* Parent node is valid */
                p_parentNid : dom(conv_ExpandedNodeId_NodeId) &
                conv_ExpandedNodeId_NodeId(p_parentNid) : ran(a_NodeId) &
                /* Reference type is valid */
                p_refTypeId : Type_IsReferenceTypeIdValid &
                new_nid : t_NodeId &
                new_nid /: ran(a_NodeId) &
                (p_reqNodeId : t_ExpandedNodeId =>
                    p_reqNodeId : dom(conv_ExpandedNodeId_NodeId) & new_nid = conv_ExpandedNodeId_NodeId(p_reqNodeId)) &
                /* Type definition is valid if node is an object or variable */
                (p_nodeClass = e_ncl_Object or p_nodeClass = e_ncl_Variable =>
                    p_typeDefId : t_ExpandedNodeId &
                    p_typeDefId : dom(conv_ExpandedNodeId_NodeId) &
                    conv_ExpandedNodeId_NodeId(p_typeDefId) : ran(a_NodeId) &
                    ((p_nodeClass = e_ncl_Object & a_NodeClass(a_NodeId~(conv_ExpandedNodeId_NodeId(p_typeDefId))) = e_ncl_ObjectType) or
                        (p_nodeClass = e_ncl_Variable & a_NodeClass(a_NodeId~(conv_ExpandedNodeId_NodeId(p_typeDefId))) = e_ncl_VariableType))
                )
            ) &
            (not(sc_operation = e_sc_ok) => new_nid = c_NodeId_indet)
        )
    END

OPERATIONS

    /* LOCAL_OPERATIONS */

    bres <-- has_NamespaceIndex(p_idx) =
    VAR
        l_bres
    IN
        l_bres <-- has_NamespaceIndex_index(p_idx);
        // Optimization: update only once per AddNodes request (do not enter
        // in the IF in this case).
        IF l_bres = FALSE
        THEN
            update_max_namespace_idx;
            l_bres <-- has_NamespaceIndex_index(p_idx)
        END;
        bres := l_bres
    END
    ;

    sc_operation <-- check_add_nodes_item_params_parent_nid(p_parentNid) =
    VAR
        l_local_server_exp_node_id,
        l_node_id,
        l_node_exists,
        l_node
    IN
         /* Validate parent node */
        l_local_server_exp_node_id, l_node_id <-- getall_conv_ExpandedNodeId_NodeId(p_parentNid);
        IF l_local_server_exp_node_id = TRUE
        THEN
            l_node_exists, l_node <-- readall_AddressSpace_Node(l_node_id);
            IF l_node_exists = TRUE
            THEN
                sc_operation := e_sc_ok
            ELSE
                sc_operation := e_sc_bad_parent_node_id_invalid
            END
        ELSE
            /* Note: unless we are able to find it in another server, it seems not ok to accept this parent node id */
            sc_operation := e_sc_bad_parent_node_id_invalid
        END
    END
    ;

    sc_operation <-- check_add_nodes_item_params_ref_type (p_refTypeId, p_sc_operation) =
    VAR
        l_bres
    IN
        sc_operation := p_sc_operation;
        /* Validates reference type */
        IF p_sc_operation = e_sc_ok
        THEN
            l_bres <-- is_valid_ReferenceTypeId(p_refTypeId);
            IF l_bres = FALSE
            THEN
                sc_operation := e_sc_bad_reference_type_id_invalid
            ELSE
                /* Check it is a hierarchical reference type (minimal condition),
                then check specific node class condition in address_space_bs */
                l_bres <-- is_transitive_subtype(p_refTypeId, c_HierarchicalReferences_Type_NodeId);
                IF l_bres = FALSE
                THEN
                    sc_operation := e_sc_bad_reference_type_id_invalid
                END
            END
        END
    END
    ;

    sc_operation <-- check_add_nodes_item_params_type_def (p_nodeClass, p_typeDefId, p_sc_operation) =
    VAR
        l_local_server_exp_node_id,
        l_node_id,
        l_node_exists,
        l_node,
        l_node_class
    IN
        sc_operation := p_sc_operation;
        /* Validates TypeDefinition if defined (mandatory for nodes of class Object or Variable) */
        IF sc_operation = e_sc_ok & p_typeDefId /= c_ExpandedNodeId_indet
        THEN
            l_local_server_exp_node_id, l_node_id <-- getall_conv_ExpandedNodeId_NodeId(p_typeDefId);
            IF l_local_server_exp_node_id = TRUE
            THEN
                l_node_exists, l_node <-- readall_AddressSpace_Node(l_node_id);
                IF l_node_exists = TRUE
                THEN
                    l_node_class <-- get_NodeClass(l_node);
                    IF l_node_class = e_ncl_VariableType & p_nodeClass = e_ncl_Variable
                    THEN
                        skip
                    ELSIF l_node_class = e_ncl_ObjectType & p_nodeClass = e_ncl_Object
                    THEN
                        skip
                    ELSE
                        sc_operation := e_sc_bad_type_definition_invalid
                    END
                ELSE
                    sc_operation := e_sc_bad_type_definition_invalid
                END
            END /* ELSE: impossible to check type definition class => assume it is expected node class */
        END
    END
    ;

    sc_operation, new_nid <-- check_add_nodes_item_params_req_node_id (p_reqNodeId, p_sc_operation) =
    VAR
        l_local_server_exp_node_id,
        l_node_id,
        l_ns_index,
        l_ns_index_valid,
        l_node_exists,
        l_node,
        l_bres
    IN
        l_bres := FALSE;
        new_nid := c_NodeId_indet;
        sc_operation := p_sc_operation;
        /* Validates requested NodeId (or Generates a fresh one if not defined) */
        IF sc_operation = e_sc_ok
        THEN
            IF p_reqNodeId /= c_ExpandedNodeId_indet
            THEN
                l_local_server_exp_node_id, l_node_id <-- getall_conv_ExpandedNodeId_NodeId(p_reqNodeId);
                IF l_local_server_exp_node_id = TRUE
                THEN
                    l_node_exists, l_node <-- readall_AddressSpace_Node(l_node_id);
                    l_ns_index <-- get_NodeId_NamespaceIndex(l_node_id);
                    l_ns_index_valid <-- has_NamespaceIndex(l_ns_index);
                    IF l_node_exists = FALSE & l_ns_index_valid = TRUE
                    THEN
                        l_bres, new_nid <-- copy_node_id_pointer_content(l_node_id);
                        IF l_bres = FALSE
                        THEN
                            sc_operation := e_sc_bad_out_of_memory
                        END
                    ELSIF l_ns_index_valid = FALSE
                    THEN
                        sc_operation := e_sc_bad_node_id_rejected
                    ELSE
                        sc_operation := e_sc_bad_node_id_exists
                    END
                ELSE
                    sc_operation := e_sc_bad_node_id_rejected
                END
            ELSE
                l_bres, new_nid <-- gen_fresh_NodeId;
                IF l_bres = FALSE
                THEN
                    sc_operation := e_sc_bad_out_of_memory
                END
            END
        END
    END
    ;

    sc_operation, new_nid
      <-- check_add_nodes_item_params
        (p_parentNid, p_refTypeId, p_reqNodeId, p_nodeClass, p_typeDefId) =
    VAR
        l_sc_operation
    IN
        l_sc_operation <-- check_add_nodes_item_params_parent_nid(p_parentNid);
        sc_operation <-- check_add_nodes_item_params_ref_type (p_refTypeId, l_sc_operation);
        l_sc_operation <-- check_add_nodes_item_params_type_def (p_nodeClass, p_typeDefId, sc_operation);
        /* Note: BrowseName is checked in address_space_bs since we do not have access to browse service here */
        sc_operation, new_nid <-- check_add_nodes_item_params_req_node_id (p_reqNodeId, l_sc_operation)
    END
    ;

    /* OPERATIONS */
    sc_operation, new_nodeId
      <-- treat_add_nodes_item (p_parentExpNid, p_refTypeId, p_reqExpNodeId, p_browseName, p_nodeClass, p_nodeAttributes, p_typeDefId) =
    VAR
        l_sc,
        l_new_nid
    IN
        l_sc, l_new_nid
          <-- check_add_nodes_item_params
            (p_parentExpNid, p_refTypeId, p_reqExpNodeId, p_nodeClass, p_typeDefId);
        IF l_sc = e_sc_ok
        THEN
            l_sc <-- addNode_AddressSpace(p_parentExpNid, p_refTypeId, l_new_nid, p_browseName, p_nodeClass, p_nodeAttributes, p_typeDefId)
        END
        ;
        sc_operation := l_sc;
        IF sc_operation = e_sc_ok
        THEN
            new_nodeId := l_new_nid
        ELSE
            free_node_id_pointer (l_new_nid);
            new_nodeId := c_NodeId_indet
        END
    END

END
