/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    translate_browse_path_i
REFINES
    translate_browse_path

SEES
    address_space_itf,
    constants,
    constants_statuscodes_bs,
    node_id_pointer_bs,
    message_in_bs,
    message_out_bs

IMPORTS
    translate_browse_path_source,
    translate_browse_path_result,
    msg_translate_browse_path_bs,
    translate_browse_path_element_it,
    translate_browse_path_source_it

PROMOTES
    write_translate_browse_paths_response,
    read_nb_BrowsePaths,
    set_browse_value_context,
    set_browse_value_context_from_continuation_point,
    clear_browse_value_context,
    getall_and_move_browse_result,
    compute_browse_result,
    release_continuation_point,
    set_session_closed,
    continuation_points_UNINITIALISATION

DEFINITIONS

    d_var_browse_source_it ==
        browsePathSourceIdx_to_iterate,
        browsePathSourceIdx_iterated,
        nb_browsePathSourceIdx_max_refs,
        nextBrowsePathSourceIdx
        ;

    d_var_element_it ==
        elements_to_iterate,
        elements_iterated,
        relativePath,
        relativePathEls
        ;

    d_var_browse_path ==
        BrowsePathSource,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        ;

    d_inv_browse_source_it ==
    (   nb_browsePathSourceIdx_max_refs : NAT &
        browsePathSourceIdx_to_iterate <: NAT1 &
        browsePathSourceIdx_iterated   <: NAT1 &
        browsePathSourceIdx_to_iterate /\ browsePathSourceIdx_iterated = {} &
        nb_browsePathSourceIdx_max_refs = card(browsePathSourceIdx_to_iterate \/ browsePathSourceIdx_iterated) &
        nextBrowsePathSourceIdx : NATURAL1
    );

    d_inv_element_it ==
    (   elements_to_iterate : seq(t_RelativePathElt)  &
        elements_iterated   : seq(t_RelativePathElt)  &
        relativePath        : t_RelativePath_i        &
        relativePathEls     : seq(t_RelativePathElt)  &
        elements_iterated ^ elements_to_iterate = relativePathEls
    )


LOCAL_OPERATIONS

    StatusCode <-- check_startingNode(nodeid)=
    PRE
        nodeid : t_NodeId_i
    THEN
        IF nodeid = c_NodeId_indet
        THEN
            StatusCode := e_sc_bad_node_id_invalid
        ELSIF nodeid /: dom(a_NodeId~)
        THEN
            StatusCode := e_sc_bad_node_id_unknown
        ELSE
            StatusCode := e_sc_ok
        END
    END
    ;

    statusCode_operation <-- copy_browsePathResult_to_source =
    BEGIN
        statusCode_operation,
        BrowsePathSource
        :(  statusCode_operation : t_StatusCode_i &
            statusCode_operation : t_StatusCode   &
            statusCode_operation: {e_sc_ok, e_sc_bad_out_of_memory,
                e_sc_bad_unexpected_error} &

            (statusCode_operation = e_sc_ok
                =>
                BrowsePathSource =
                %(idx).(idx : 1..size(BrowsePathResult) &
                    BrowsePathResult(idx) : dom(conv_ExpandedNodeId_NodeId)
                    | conv_ExpandedNodeId_NodeId(BrowsePathResult(idx)))
            ) &
            (statusCode_operation /= e_sc_ok =>
                BrowsePathSource = {}
            )
        ) ||
        d_var_browse_source_it :(d_inv_browse_source_it)
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, in_statusCode_operation) =
    PRE
        browsePath : t_BrowsePath_i  &
        browsePath : BrowsePaths     &
        browsePath : dom(BrowsePath_Res_NbTargetMax) &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server}
    THEN
        out_statusCode_operation,
        d_var_browse_source_it,
        BrowsePath_Res_NbTargetMax,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(  d_inv_browse_source_it &

            BrowsePath_Res_NbTargetMax : t_BrowsePath +-> NAT &

            out_statusCode_operation : t_StatusCode_i &
            out_statusCode_operation : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server, e_sc_bad_query_too_complex,
                e_sc_bad_out_of_memory, e_sc_bad_too_many_matches} &
            (out_statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>
                BrowsePath_Res_Target_Node(browsePath) = BrowsePathResult^BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) = %(xx).(xx : 1..size(BrowsePathResult) | k_n_noRemainingPathIndex ) &
                (size(BrowsePathResult) + 1 .. size(BrowsePath_Res_Target_Index(browsePath))) <| BrowsePath_Res_Target_Index(browsePath) = BrowsePathRemainingIndex &
                size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath))
            )
        )
    END
    ;

    out_statusCode_operation, statusCode_alloc <-- copy_browsePathResult_to_msg_1(browsePath, in_statusCode_operation, size_result) =
    PRE
        browsePath : t_BrowsePath_i &
        browsePath : BrowsePaths    &
        browsePath : dom(BrowsePath_Res_NbTargetMax) &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server} &
        size_result : NAT &
        size_result = size(BrowsePathResult) &
        BrowsePath_Res_Target_Node(browsePath) = {} &
        BrowsePath_Res_Target_Index(browsePath) = {}
    THEN
        out_statusCode_operation,
        statusCode_alloc,
        d_var_browse_source_it,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(  out_statusCode_operation : t_StatusCode_i &
            out_statusCode_operation : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &
            statusCode_alloc : t_StatusCode_i &
            statusCode_alloc : t_StatusCode   &

            d_inv_browse_source_it &

            BrowsePath_Res_Target_Node  : t_BrowsePath +-> seq(t_ExpandedNodeId) &
            BrowsePath_Res_Target_Index : t_BrowsePath +-> seq(NAT) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Node) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Index) &

            size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath)) &
            size(BrowsePath_Res_Target_Node(browsePath)) <= BrowsePath_Res_NbTargetMax(browsePath) &

            /* Success of copy of all browse paths */
            (statusCode_alloc = e_sc_ok =>
                BrowsePath_Res_Target_Node(browsePath) = BrowsePathResult &
                BrowsePath_Res_Target_Index(browsePath) =
                    (1..size(BrowsePathResult)) * {k_n_noRemainingPathIndex}
            )
        )
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg_2(browsePath, in_statusCode_operation, nb_max_ref) =
    PRE
        browsePath : t_BrowsePath_i &
        browsePath : BrowsePaths    &
        browsePath : dom(BrowsePath_Res_NbTargetMax) &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                                   e_sc_bad_out_of_memory} &
        nb_max_ref : NAT &
        nb_max_ref = size(BrowsePathRemainingNodeId) &
        size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePathResult)
    THEN
        out_statusCode_operation,
        d_var_browse_source_it,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(  out_statusCode_operation : t_StatusCode_i &
            out_statusCode_operation : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &

            d_inv_browse_source_it &

            BrowsePath_Res_Target_Node  : t_BrowsePath +-> seq(t_ExpandedNodeId) &
            BrowsePath_Res_Target_Index : t_BrowsePath +-> seq(NAT) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Node) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Index) &

            size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath)) &
            size(BrowsePath_Res_Target_Node(browsePath)) <= BrowsePath_Res_NbTargetMax(browsePath) &

            /* Previous copy of BrowsePathResult remains unchanged */
            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node$0(browsePath) &
            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index$0(browsePath) &
            /* Success of copy of all remaining browse paths */
            (out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server} =>
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Node(browsePath) =
                    BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Index(browsePath) =
                    BrowsePathRemainingIndex
            )
        )
    END
    ;

    statusCode_operation <-- treat_one_translate_browse_path_1(source, rel_path) =
    PRE
        IsDecoded = TRUE &
        source : t_NodeId_i &
        source : t_NodeId   &
        rel_path : t_RelativePath_i &
        rel_path : t_RelativePath   &
        rel_path : dom(RelativePath_RelativePathElt)
    THEN
        statusCode_operation,
        BrowsePathSource,
        BrowsePathResult, BrowsePathRemainingNodeId, BrowsePathRemainingIndex
        :(
            statusCode_operation : t_StatusCode_i &
            statusCode_operation : t_StatusCode   &
            statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex, e_sc_bad_no_match,
                e_sc_bad_out_of_memory, e_sc_bad_unexpected_error} &

            BrowsePathSource : seq(t_NodeId_i) &

            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            c_ExpandedNodeId_indet /: ran(BrowsePathResult) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex : seq(NAT1)
        ) ||

        d_var_browse_source_it,
        d_var_element_it
        :(
            d_inv_browse_source_it  &
            d_inv_element_it
        )
    END
    ;

    statusCode_operation, p_continue <-- treat_relative_path_sequence(rel_path_elt, path_index, continue) =
    PRE
        IsDecoded = TRUE &
        rel_path_elt : t_RelativePathElt_i &
        rel_path_elt : t_RelativePathElt   &
        rel_path_elt : s_RelativePathElt   &
        path_index : NAT1 &
        continue : BOOL
    THEN
        statusCode_operation,
        p_continue,
        d_var_browse_path
        :(  statusCode_operation : t_StatusCode_i &
            statusCode_operation : t_StatusCode   &
            statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex, e_sc_bad_no_match,
                e_sc_bad_out_of_memory, e_sc_bad_unexpected_error} &
            p_continue : BOOL &

            BrowsePathSource : seq(t_NodeId_i) &
            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            c_ExpandedNodeId_indet /: ran(BrowsePathResult) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1)
        ) ||

        d_var_browse_source_it :(d_inv_browse_source_it)
    END

OPERATIONS

    StatusCode_service <-- init_translate_browse_paths_request(req_msg) =
    VAR
        l_nb_BrowsePaths
    IN
        StatusCode_service <-- decode_translate_browse_paths_request(req_msg);
        IF StatusCode_service = e_sc_ok
        THEN
            l_nb_BrowsePaths <-- read_nb_BrowsePaths;
            IF l_nb_BrowsePaths = 0
            THEN
                StatusCode_service := e_sc_bad_nothing_to_do
            ELSE
                StatusCode_service <-- alloc_browse_path_result;
                IF StatusCode_service /= e_sc_ok
                THEN
                    StatusCode_service := e_sc_bad_too_many_ops
                END
            END
        END
    END
    ;

    treat_one_translate_browse_path(browsePath) =
    VAR
        l_statusCode_operation,
        l_statusCode_operation_2,
        l_size_rel_path,
        l_relativePath,
        l_source
    IN
        l_relativePath <-- read_BrowsePath_RelativePath(browsePath);
        l_source <-- read_BrowsePath_StartingNode(browsePath);
        l_size_rel_path <-- read_RelativePath_Nb_RelativePathElt(l_relativePath);
        l_statusCode_operation <-- check_startingNode(l_source);
        IF (l_size_rel_path = 0)
        THEN
            // There is no element in the path
            write_BrowsePath_Res_StatusCode(browsePath, e_sc_bad_nothing_to_do)
        ELSIF l_statusCode_operation /= e_sc_ok
        THEN
            write_BrowsePath_Res_StatusCode(browsePath, l_statusCode_operation)
        ELSE
            l_statusCode_operation <--
                treat_one_translate_browse_path_1(l_source, l_relativePath);

            IF l_statusCode_operation = e_sc_ok or
                l_statusCode_operation = e_sc_uncertain_reference_out_of_server
            THEN
                l_statusCode_operation_2 := l_statusCode_operation;
                l_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, l_statusCode_operation_2)
            END
            ;
            write_BrowsePath_Res_StatusCode(browsePath, l_statusCode_operation);
            free_BrowsePathResult;
            free_BrowsePathRemaining
        END
    END
    ;

    /* LOCAL_OPERATION */
    StatusCode <-- check_startingNode(nodeid)=
    VAR
        l_isvalid,
        l_src_node
    IN
        StatusCode := e_sc_ok;
        IF nodeid = c_NodeId_indet
        THEN
            StatusCode := e_sc_bad_node_id_invalid
        ELSE
            l_isvalid, l_src_node <-- readall_AddressSpace_Node(nodeid);
            IF l_isvalid = FALSE
            THEN
                StatusCode := e_sc_bad_node_id_unknown
            END
        END
    END
    ;

    statusCode_operation <-- copy_browsePathResult_to_source =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId,
        l_local_server,
        l_nodeId,
        l_source_copy
    IN
        statusCode_operation := e_sc_ok;
        l_size <-- get_BrowsePathResultSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            IF l_expandedNodeId /= c_ExpandedNodeId_indet
            THEN
                l_local_server, l_nodeId <-- getall_conv_ExpandedNodeId_NodeId(l_expandedNodeId);
                ASSERT l_local_server = TRUE THEN
                    statusCode_operation <-- update_one_browse_path_source(l_nodeId);
                    IF (statusCode_operation /= e_sc_ok)
                    THEN
                        free_BrowsePathSource;
                        l_continue := FALSE
                    END
                END
            ELSE
                free_BrowsePathSource;
                statusCode_operation := e_sc_bad_unexpected_error;
                l_continue := FALSE
            END
        INVARIANT
            l_index : NAT     &
            l_index <= l_size &
            browsePathSourceIdx_iterated = 1 .. l_index            &
            browsePathSourceIdx_to_iterate = l_index + 1 .. l_size &
            nextBrowsePathSourceIdx = l_index + 1                  &
            l_continue = bool(l_index < l_size)

        VARIANT
            0
        END
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, in_statusCode_operation) =
    VAR
        l_size,
        l_continue,
        l_index,
        l_size_result,
        l_size_remaining,
        l_statusCode_alloc,
        l_expandedNodeId,
        l_remainingIndex,
        l_statusCode_op
    IN
        out_statusCode_operation := in_statusCode_operation;
        l_size_result <-- get_BrowsePathResultSize;
        l_size_remaining <-- get_BrowsePathRemainingSize;
        l_size := l_size_result + l_size_remaining;
        IF l_size <= k_n_BrowsePathResPerPath_max THEN
            l_statusCode_alloc <-- alloc_BrowsePath_Res_Target(browsePath, l_size);
            IF l_statusCode_alloc = e_sc_ok THEN
                l_statusCode_op := out_statusCode_operation;
                /* Move result from BrowsePathResult */
                out_statusCode_operation, l_statusCode_alloc <--
                    copy_browsePathResult_to_msg_1(browsePath,
                                                   l_statusCode_op,
                                                   l_size_result);

                IF l_statusCode_alloc = e_sc_ok THEN
                    l_statusCode_op := out_statusCode_operation;
                    out_statusCode_operation <--
                        copy_browsePathResult_to_msg_2(browsePath,
                                                       l_statusCode_op,
                                                       l_size_remaining)
                END
            ELSE
                out_statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            out_statusCode_operation := e_sc_bad_too_many_matches
        END
    END
    ;

    out_statusCode_operation, statusCode_alloc <-- copy_browsePathResult_to_msg_1(browsePath, in_statusCode_operation, size_result) =
    VAR
        l_continue,
        l_index,
        l_expandedNodeId,
        l_remainingIndex,
        l_statusCode_alloc
    IN
        statusCode_alloc := e_sc_ok;
        out_statusCode_operation := in_statusCode_operation;

        /* Move result from BrowsePathResult */
        l_continue <-- init_iter_browsePathSourceIdx(size_result);
        l_index := 0;
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            statusCode_alloc <-- add_BrowsePath_Res_Target(browsePath, l_expandedNodeId);
            IF statusCode_alloc /= e_sc_ok THEN
                out_statusCode_operation := e_sc_bad_out_of_memory;
                l_continue := FALSE
            END
        INVARIANT
            l_index : NAT          &
            l_index <= size_result &
            browsePathSourceIdx_iterated = 1 .. l_index &
            browsePathSourceIdx_to_iterate = l_index + 1 .. size_result &
            nextBrowsePathSourceIdx = l_index + 1 &
            l_continue = bool(statusCode_alloc = e_sc_ok & (l_index < size_result)) &

            statusCode_alloc : t_StatusCode_i &
            statusCode_alloc : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok,e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &

            card(BrowsePath_Res_Target_Node(browsePath)) = l_index &

            {browsePath} <<| BrowsePath_Res_Target_Node =
                {browsePath} <<| BrowsePath_Res_Target_Node$0 &
            {browsePath} <<| BrowsePath_Res_Target_Index =
                {browsePath} <<| BrowsePath_Res_Target_Index$0 &

            (statusCode_alloc = e_sc_ok =>
                BrowsePath_Res_Target_Node(browsePath) = 1..l_index <| BrowsePathResult &
                BrowsePath_Res_Target_Index(browsePath) =
                    (1..l_index) * {k_n_noRemainingPathIndex}
            ) &
            (statusCode_alloc /= e_sc_ok =>
                BrowsePath_Res_Target_Node(browsePath) = 1..l_index - 1 <| BrowsePathResult &
                BrowsePath_Res_Target_Index(browsePath) =
                    (1..l_index - 1) * {k_n_noRemainingPathIndex}
            )
        VARIANT
            size_result - l_index
        END
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg_2(browsePath, in_statusCode_operation, nb_max_ref) =
    VAR
        l_continue,
        l_index,
        l_expandedNodeId,
        l_remainingIndex,
        l_statusCode_alloc
    IN
        out_statusCode_operation := in_statusCode_operation;
        l_statusCode_alloc := e_sc_ok;

        l_continue <-- init_iter_browsePathSourceIdx(nb_max_ref);
        l_index := 0;
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId, l_remainingIndex <-- get_BrowsePathRemaining(l_index);
            l_statusCode_alloc <-- add_BrowsePath_Res_Target_withRemainingPath(browsePath, l_expandedNodeId, l_remainingIndex);
            IF l_statusCode_alloc /= e_sc_ok THEN
                out_statusCode_operation := e_sc_bad_out_of_memory;
                l_continue := FALSE
            END
        INVARIANT

            l_index : NAT         &
            l_index <= nb_max_ref &
            browsePathSourceIdx_iterated = 1 .. l_index &
            browsePathSourceIdx_to_iterate = l_index + 1 .. nb_max_ref &
            nextBrowsePathSourceIdx = l_index + 1 &
            l_continue = bool(l_statusCode_alloc = e_sc_ok & (l_index < nb_max_ref)) &

            out_statusCode_operation : {e_sc_ok,e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &

            {browsePath} <<| BrowsePath_Res_Target_Node =
                {browsePath} <<| BrowsePath_Res_Target_Node$0 &
            {browsePath} <<| BrowsePath_Res_Target_Index =
                {browsePath} <<| BrowsePath_Res_Target_Index$0 &

            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node$0(browsePath) &
            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index$0(browsePath) &

            (l_statusCode_alloc = e_sc_ok =>
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Node(browsePath) =
                    1..l_index <| BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Index(browsePath) =
                    1..l_index <| BrowsePathRemainingIndex
            ) &
            (l_statusCode_alloc /= e_sc_ok =>
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Node(browsePath) =
                    1..l_index - 1 <| BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Index(browsePath) =
                    1..l_index - 1 <| BrowsePathRemainingIndex
            )

        VARIANT
            nb_max_ref - l_index
        END
    END
    ;

    statusCode_operation <-- treat_one_translate_browse_path_1(source, rel_path) =
    VAR
        l_continue,
        l_continue_1,
        l_source_copy,
        l_index,
        l_relativePathElt,
        l_statusCode
    IN
        statusCode_operation <-- update_one_browse_path_source(source);

        IF (statusCode_operation = e_sc_ok)
        THEN
            l_continue <-- init_iter_relativePath(rel_path);

            l_index := 0;
            /* Iterate on element list of the path
               - BrowsePathResult is reset at each step to keep only intermediate target
               - BrowsePathRemainingNodeId/Index are cumulative
               - Final target are last step BrowsePathResult + BrowsePathRemainingNodeId
            */
            WHILE l_continue = TRUE
            DO
                l_continue, l_relativePathElt, l_index <-- continue_iter_relativePath;

                l_continue_1 := l_continue;
                statusCode_operation, l_continue <--
                    treat_relative_path_sequence(l_relativePathElt,
                                                        l_index, l_continue_1)
            INVARIANT
                elements_to_iterate : seq(t_RelativePathElt)  &
                elements_iterated   : seq(t_RelativePathElt)  &
                elements_iterated ^ elements_to_iterate = relativePathEls &

                l_continue = bool(size(elements_to_iterate) > 0 &
                                  (size(elements_iterated) = 0 or
                                   statusCode_operation = e_sc_ok ))

            VARIANT
                card(elements_to_iterate)
            END
        END
    END
    ;

    statusCode_operation, p_continue <-- treat_relative_path_sequence(rel_path_elt, path_index, continue) =
    BEGIN
        /* Update BrowsePathResult and BrowsePathRemaining with computed browse results */
        free_BrowsePathResult;
        statusCode_operation <--
            treat_one_relative_path_element(rel_path_elt, path_index);

        /* Update BrowsePathSource with BrowsePathResult */
        free_BrowsePathSource;
        p_continue := bool(continue = TRUE &
                           (statusCode_operation = e_sc_ok or
                            statusCode_operation = e_sc_uncertain_reference_out_of_server));
        IF p_continue = TRUE
        THEN
            statusCode_operation <-- copy_browsePathResult_to_source
        END
    END

END
