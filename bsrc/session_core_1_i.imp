/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    session_core_1_i

REFINES
    session_core_1

SEES
    constants,
    constants_statuscodes_bs,
    request_handle_bs,
    message_out_bs,
    message_in_bs,
    channel_mgr,
    time_reference_bs

IMPORTS
    session_core_1_it,
    session_core_2,
    session_core_bs

PROMOTES
    server_get_session_from_token,
    client_get_token_from_session,
    server_get_fresh_session_token,
    server_is_valid_session_token,
    client_set_session_token,
    reset_session_to_create,
    is_valid_session,
    is_client_session,
    get_session_state,
    set_session_channel,
    getall_session_channel,
    get_session_channel,
    get_channel_nb_sessions,
    getall_to_create,
    getall_orphaned,
    set_session_to_create,
    drop_user_server,
    set_session_user_server,
    set_session_user_client,
    session_has_user_server,
    get_session_user_server,
    get_session_user_client,
    is_same_user_server,
    server_set_fresh_nonce,
    server_create_session_req_do_crypto,
    server_may_need_user_token_encryption,
    may_validate_server_certificate,
    client_activate_session_req_do_crypto,
    clear_Signature,
    get_NonceServer,
    client_create_session_req_do_crypto,
    get_NonceClient,
    drop_NonceClient,
    client_create_session_check_crypto,
    server_activate_session_check_crypto,
    client_activate_session_resp_check,
    client_close_session_req_msg,
    client_close_session_resp_msg,
    server_close_session_check_req,
    session_do_nothing,
    set_session_app_context,
    get_session_app_context,
    client_gen_create_session_internal_event,
    client_gen_activate_orphaned_session_internal_event,
    client_gen_activate_user_session_internal_event,
    server_session_timeout_start_timer,
    server_session_timeout_evaluation,
    server_session_timeout_msg_received,
    get_server_session_preferred_locales,
    get_session_user_secu_client,
    client_create_session_set_user_token_secu_properties,
    get_session_user_server_certificate,
    client_set_NonceServer,
    sign_user_token

LOCAL_OPERATIONS

    l_set_session_state(p_session, p_state, is_client) =
    PRE
        p_session : t_session_i    &
        p_session : dom(a_state)   &
        p_state   : t_sessionState &
        p_state  /= e_session_closed &
        p_state /= e_session_init &
        is_client : BOOL
    THEN
        a_state(p_session) := p_state
    END
    ;

    l_reset_server_session_preferred_locales(p_session) =
    PRE
        p_session : t_session_i &
        p_session : dom(a_state)
    THEN
        a_server_client_locales(p_session) := c_LocaleIds_empty
    END

OPERATIONS

    /* Local operations */

    l_set_session_state(p_session, p_state, is_client) =
    VAR
        l_prec_state
    IN
        l_prec_state <-- get_session_state(p_session);
        set_session_state_1(p_session, p_state);
        notify_set_session_state(p_session, l_prec_state, p_state, c_StatusCode_indet, is_client)
    END
    ;

    l_reset_server_session_preferred_locales(p_session) =
    VAR
        l_old_localeIds
    IN
        l_old_localeIds <-- reset_server_session_preferred_locales(p_session);
        IF l_old_localeIds /= c_LocaleIds_indet
        THEN
            free_LocaleIds(l_old_localeIds)
        END
    END
    ;

    /* Global operations */

    p_session <-- init_new_session (is_client) =
    VAR
        l_is_session,
        l_continue,
        l_current_time
    IN
        p_session := c_session_indet;
        l_is_session := TRUE;
        l_continue <-- init_iter_session;
        IF  l_continue = TRUE  /* Only for the proof */
        THEN
            WHILE
                l_continue   = TRUE &
                l_is_session = TRUE
            DO
                l_continue, p_session <-- continue_iter_session;
                l_is_session <-- is_valid_session(p_session)
            INVARIANT
                l_continue = bool(sessions_to_iterate /= {}) &
                sessions_to_iterate /\ sessions_iterated = {} &
                sessions_to_iterate \/ sessions_iterated = t_session &
                (   l_is_session = TRUE
                    =>
                    sessions_iterated <: s_session) &
                (   l_is_session = FALSE
                    =>
                    p_session  : t_session &
                    p_session /: s_session)
            VARIANT
                card(sessions_to_iterate)
            END
        END;
        IF  l_is_session = TRUE THEN
            p_session := c_session_indet
        ELSE
            l_current_time <-- get_current_TimeReference;
            add_session(p_session, is_client, l_current_time);
            notify_set_session_state(p_session, e_session_closed, e_session_init, c_StatusCode_indet, is_client)
        END
    END
    ;

    create_session (session, channel, state, is_client) =
    BEGIN
        set_session_channel(session, channel);
        l_set_session_state(session, state, is_client);
        IF is_client = FALSE
        THEN
            set_server_session_user_auth_attempts(session, 0)
        END
    END
    ;

    set_session_state (session, state, is_client) =
    BEGIN
        l_set_session_state (session, state, is_client)
    END
    ;

    set_session_state_closed (session, sc_reason, is_client) =
    VAR
        l_prec_state
    IN
        /* First notify of state change to have access to data before removing all session data */
        l_prec_state <-- get_session_state(session);
        notify_set_session_state(session, l_prec_state, e_session_closed, sc_reason, is_client);

        reset_session_channel(session);
        // a_channel

        delete_session_token(session, is_client);
        // a_server_token
        // a_client_token
        // a_user_client
        // a_user_secu_client
        // a_user_server_cert
        reset_session_to_create(session);
        // a_client_to_create
        delete_session_application_context(session);
        // a_client_app_context
        reset_session_orphaned(session);
        // a_client_orphaned
        l_reset_server_session_preferred_locales (session);
        // a_server_client_locales
        remove_NonceServer(session, is_client);
        // a_NonceServer
        remove_session(session);
        // s_session
        // a_state

        IF is_client = FALSE
        THEN
            server_session_timeout_stop_timer(session);
            drop_user_server(session)
        ELSE
            drop_NonceClient(session)
            // a_NonceClient
        END
    END
    ;

    set_session_orphaned (session, channel_config_idx) =
    VAR
        l_bool
    IN
        reset_session_channel(session);
        l_bool <-- is_t_channel_config_idx(channel_config_idx);
        IF  l_bool = TRUE THEN
            set_session_orphaned_1(session, channel_config_idx)
        END
    END
    ;

    set_server_session_preferred_locales_or_indet(p_session, p_localesIds) =
    VAR
        l_old_localeIds
    IN
        IF p_localesIds /= c_LocaleIds_indet
        THEN
            l_old_localeIds <-- reset_server_session_preferred_locales(p_session);
            IF l_old_localeIds /= c_LocaleIds_indet
            THEN
                free_LocaleIds(l_old_localeIds)
            END
            ;
            set_server_session_preferred_locales(p_session, p_localesIds)
        END
    END
    ;

    p_max_reached <-- check_server_session_user_auth_attempts(p_session, p_success) =
    VAR
        l_attempts
    IN
        IF p_success = TRUE
        THEN
            p_max_reached := FALSE
        ELSE
            l_attempts <-- get_server_session_user_auth_attempts(p_session);
            l_attempts := l_attempts + 1;
            set_server_session_user_auth_attempts(p_session, l_attempts);
            p_max_reached := bool(l_attempts >= k_n_UserAuthAttempts_max)
        END

    END
    ;

    p_has_session_to_close, p_session_to_close <-- find_session_to_close =
    VAR
        l_continue,
        l_session,
        l_valid_session,
        l_state,
        l_timeref,
        l_is_older_than,
        l_oldest_session,
        l_oldest_session_timeref,
        l_min_timeref_req,
        l_current_timeref
    IN
        l_oldest_session := c_session_indet;
        l_oldest_session_timeref := c_timeref_indet;
        l_continue <-- init_iter_session;
        WHILE
            l_continue = TRUE
        DO
            l_continue, l_session <-- continue_iter_session;
            l_valid_session <-- is_valid_session (l_session);
            IF l_valid_session = TRUE
            THEN
                l_state <-- get_session_state (l_session);
                /* We can close only created session that is not yet activated */
                IF l_state = e_session_created
                THEN
                    l_timeref <-- get_init_time(l_session);
                    IF l_oldest_session_timeref = c_timeref_indet
                    THEN
                        /* Ensure we waited the minimum delay to allow session activation */
                        l_min_timeref_req <-- add_delay_TimeReference (l_timeref, c_session_activation_min_delay);
                        l_current_timeref <-- get_current_TimeReference;
                        l_is_older_than <-- is_less_than_TimeReference(l_min_timeref_req, l_current_timeref);
                        IF l_is_older_than = TRUE
                        THEN
                            /* first secure channel we are allowed to close found */
                            l_oldest_session_timeref := l_timeref;
                            l_oldest_session := l_session
                        END
                    ELSE
                        l_is_older_than <-- is_less_than_TimeReference(l_timeref, l_oldest_session_timeref);
                        IF l_is_older_than = TRUE
                        THEN
                            /* older secure channel to close found */
                            l_oldest_session_timeref := l_timeref;
                            l_oldest_session := l_session
                        END
                    END
                END
            END
        INVARIANT
            l_continue = bool(sessions_to_iterate /= {}) &
            sessions_to_iterate /\ sessions_iterated = {} &
            sessions_to_iterate \/ sessions_iterated = t_session &

            !(p_session).(p_session : dom(sessions_iterated <| a_state |> {e_session_created}) =>
                /* Oldest timeref is less than any other timeref */
                (l_oldest_session_timeref /= a_session_init_time(p_session) =>
                    l_oldest_session_timeref |-> a_session_init_time(p_session) : TimeReference_IsLessThan) &
                    l_oldest_session : a_session_init_time~[{l_oldest_session_timeref}]
            )
            &
            (sessions_iterated <| a_state |> {e_session_created} = {} =>
                l_oldest_session_timeref = c_timeref_indet &
                l_oldest_session = c_session_indet
            )
        VARIANT
            card(sessions_to_iterate)
        END;
        IF l_oldest_session_timeref = c_timeref_indet
        THEN
            p_has_session_to_close := FALSE;
            p_session_to_close := c_session_indet
        ELSE
            p_has_session_to_close := TRUE;
            p_session_to_close := l_oldest_session
        END
    END
    ;

    p_auto_closed_active <-- is_auto_close_session_active =
    VAR
        l_t_session_card,
        l_s_session_card,
        l_avail_session_card
    IN
        l_t_session_card <-- get_card_t_session;
        l_s_session_card <-- get_card_s_session;
        l_avail_session_card := l_t_session_card - l_s_session_card;
        p_auto_closed_active := bool(l_avail_session_card <= 1)
    END

END
