/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

DEFINITIONS

    d_Mandatory_Attribute(dvNcl, dvAid) ==
    /* COMMON MANDATORY ATTRIBUTES: all node classes have it */
    (dvAid = e_aid_BrowseName or dvAid = e_aid_DisplayName or
        dvAid = e_aid_NodeClass or dvAid = e_aid_NodeId) or

    (dvNcl = e_ncl_Variable & /* VARIABLE */
        (dvAid = e_aid_AccessLevel or dvAid = e_aid_AccessLevelEx or /* optional in spec but mandatory in profiles */
            dvAid = e_aid_DataType or
            dvAid = e_aid_Historizing or dvAid = e_aid_UserAccessLevel or
            dvAid = e_aid_Value or dvAid = e_aid_ValueRank or
            dvAid = e_aid_ArrayDimensions)
    ) or
    (dvNcl = e_ncl_VariableType & /* VARIABLE TYPE */
        (dvAid = e_aid_DataType or dvAid = e_aid_IsAbstract or
         dvAid = e_aid_ValueRank or dvAid = e_aid_ArrayDimensions)
    ) or
    (dvNcl = e_ncl_Object & /* OBJECT */
        dvAid = e_aid_EventNotifier
    ) or
    (dvNcl = e_ncl_ObjectType & /* OBJECT TYPE */
        dvAid = e_aid_IsAbstract
    ) or
    (dvNcl = e_ncl_ReferenceType & /* REFERENCE TYPE */
        (dvAid = e_aid_IsAbstract or dvAid = e_aid_Symmetric)
    ) or
    (dvNcl = e_ncl_DataType & /* DATA TYPE */
        dvAid = e_aid_IsAbstract
    ) or
    (dvNcl = e_ncl_Method & /* METHOD */
        (dvAid = e_aid_UserExecutable or dvAid = e_aid_Executable)
    ) or
    (dvNcl = e_ncl_View & /* VIEW */
        (dvAid = e_aid_EventNotifier or dvAid = e_aid_ContainsNoLoops))
    ;

    d_adsp_nodes_variables ==
        /* Address Space nodes */
        s_Node,

        /* Attributes (mandatory) */
        a_NodeId,
        a_NodeClass,
        a_BrowseName,
        a_DisplayName,
        a_Value,
        a_Value_StatusCode,
        a_Value_SourceTimestamp,
        a_IsAbstract,
        a_EventNotifier,
        a_DataType,
        a_ValueRank,
        a_ArrayDimensions,
        a_AccessLevel,
        a_AccessLevelEx,
        a_UserAccessLevel,
        a_Historizing,
        a_Executable,
        a_UserExecutable,
        a_ContainsNoLoops,
        a_Symmetric,

        /* Properties */
        a_NodeClass_Attribute,

        /* Types */
        Type_IsTransitiveSubtype,
        Type_IsReferenceTypeIdValid,

        /* Objects */
        Object_HasMethod,

        Variant_LocalDataType,
        Variant_ValueRank,

        /* References */
        Reference_SourceNode,
        Reference_ReferenceType,
        Reference_TargetNode,
        Reference_IsForward,

        Node_RefIndexEnd,
        RefIndex_Reference
        ;

    d_adsp_variables ==

        d_adsp_nodes_variables,

        ConstantAddressSpace,

        IsRangeDefined,
        IsValid_VariantIndex,
        HasRange_VariantIndex,

        /* Local treament */
        local_service_treatment,

        /* A special reference, that we model because it is used by Browse.
         * This is the content of the TargetNode of all Variables and Objects. */
        Ref_HasTypeDefinition,

        /* Node authorizations (includes local treatment) */
        s_access_read,
        s_access_write,
        s_executable,

        /* User authorization */
        s_AuthorizedOperations
    ;

    d_adsp_nodes_invariant ==
    (
        s_Node <: t_Node &

        /* Node attributes */
        a_NodeId      : s_Node >-> t_NodeId        &
        a_NodeClass   : s_Node --> t_NodeClass     &
        a_BrowseName  : s_Node --> t_QualifiedName &
        a_DisplayName : s_Node --> t_LocalizedText &

        a_Value : s_Node +-> t_Variant &
        dom(a_NodeClass|>{e_ncl_Variable}) <: dom(a_Value) &
        dom(a_Value) <: dom(a_NodeClass|>{e_ncl_Variable, e_ncl_VariableType}) &
        dom(a_NodeClass|>{e_ncl_Variable}) <: dom(a_Value) & /* All Variable have value but not all VariableType */

        /* + Value attribute meta-data */
        a_Value_StatusCode : a_NodeClass~[{e_ncl_Variable}] --> t_RawStatusCode &

        a_Value_SourceTimestamp : a_NodeClass~[{e_ncl_Variable}] --> t_Timestamp &

        a_IsAbstract : a_NodeClass~[{e_ncl_ObjectType, e_ncl_VariableType, e_ncl_ReferenceType, e_ncl_DataType}] --> BOOL &

        a_EventNotifier : a_NodeClass~[{e_ncl_Object, e_ncl_View}] --> t_Byte &

        a_DataType : a_NodeClass~[{e_ncl_Variable, e_ncl_VariableType}] --> t_NodeId &

        a_ValueRank : a_NodeClass~[{e_ncl_Variable, e_ncl_VariableType}] --> t_ValueRank &

        a_ArrayDimensions : a_NodeClass~[{e_ncl_Variable, e_ncl_VariableType}] --> t_ArrayDimensions &

        a_AccessLevel : a_NodeClass~[{e_ncl_Variable}] --> t_access_level &

        a_AccessLevelEx : a_NodeClass~[{e_ncl_Variable}] --> t_access_level_ex &

        a_UserAccessLevel : a_NodeClass~[{e_ncl_Variable}] --> t_access_level &

        a_Historizing : a_NodeClass~[{e_ncl_Variable}] --> BOOL &

        a_Executable : a_NodeClass~[{e_ncl_Method}] --> BOOL &

        a_UserExecutable : a_NodeClass~[{e_ncl_Method}] --> BOOL &

        a_ContainsNoLoops : a_NodeClass~[{e_ncl_View}] --> BOOL &

        a_Symmetric : a_NodeClass~[{e_ncl_ReferenceType}] --> BOOL &

        /* Properties */
        a_NodeClass_Attribute : t_NodeClass * t_AttributeId --> BOOL &

        /* Types */
        Type_IsTransitiveSubtype : t_NodeId <-> t_NodeId &
        Type_IsReferenceTypeIdValid <: t_NodeId &

        /* Objects */
        Object_HasMethod : t_NodeId <-> t_NodeId &

        Variant_LocalDataType : t_Variant --> t_NodeId &
        Variant_ValueRank : t_Variant --> t_ConcreteValueRank &

        /* Special reference (see def) */
        Ref_HasTypeDefinition : s_Node +-> t_ExpandedNodeId &
        dom(Ref_HasTypeDefinition) = dom(a_NodeClass |> {e_ncl_Variable, e_ncl_Object}) &

        /* References */
        Reference_SourceNode    : t_Reference --> t_NodeId         &
        Reference_ReferenceType : t_Reference --> t_NodeId         &
        Reference_TargetNode    : t_Reference --> t_ExpandedNodeId &
        Reference_IsForward     : t_Reference --> BOOL             &

        Node_RefIndexEnd        : s_Node     --> t_RefIndex  &
        RefIndex_Reference      : s_Node * t_RefIndex --> t_Reference
    );

    d_adsp_invariant ==
    (
        d_adsp_nodes_invariant &

        ConstantAddressSpace : BOOL &

        IsRangeDefined : t_IndexRange_i --> BOOL &
        IsValid_VariantIndex : t_Variant * t_IndexRange_i --> BOOL &
        HasRange_VariantIndex  : t_Variant * t_IndexRange_i --> BOOL &

        /* Local treatment */
        local_service_treatment : BOOL &

        /* Node authorizations (includes local treatment) */
        s_access_read <: t_Node_i &
        s_access_write <: t_Node_i * t_RawStatusCode * t_Timestamp &
        s_executable <: t_Node_i &

        /* User authorization */
        s_AuthorizedOperations <: t_operation_type * t_NodeId * t_AttributeId * t_user
    );

    d_adsp_add_operation ==
    StatusCode_service <-- treat_add_nodes_request(p_user, p_req_msg, p_resp_msg) =
    PRE
        p_user : t_user_i        &
        p_user : t_user          &
        p_req_msg : t_msg_i  &
        p_req_msg = c_msg_in &
        c_msg_in : t_msg         &
        a_msg_in_type = e_msg_node_add_nodes_req &
        p_resp_msg : t_msg_i   &
        p_resp_msg = c_msg_out &
        c_msg_out : t_msg &
        a_msg_out_type = e_msg_node_add_nodes_resp
    THEN
        StatusCode_service,
        d_adsp_nodes_variables
        :(
            StatusCode_service       : t_StatusCode_i &
            StatusCode_service       : {e_sc_ok, e_sc_bad_nothing_to_do, e_sc_bad_too_many_ops, e_sc_bad_out_of_memory}  &
            d_adsp_nodes_invariant
        )
    END
    ;

    d_adsp_add_node_internal_operation ==
    sc_addnode <-- addNode_AddressSpace(p_parentNid, p_refTypeId, p_newNodeId, p_browseName, p_nodeClass, p_nodeAttributes, p_typeDefId) =
    PRE
        p_parentNid : t_ExpandedNodeId_i &
        p_parentNid : dom(conv_ExpandedNodeId_NodeId) &
        conv_ExpandedNodeId_NodeId(p_parentNid) : ran(a_NodeId) &
        p_refTypeId : t_NodeId_i &
        p_refTypeId : t_NodeId &
        p_newNodeId : t_NodeId_i &
        p_newNodeId : t_NodeId &
        p_newNodeId /: ran(a_NodeId) &
        p_browseName : t_QualifiedName_i &
        p_browseName : t_QualifiedName &
        p_nodeClass : t_NodeClass_i &
        p_nodeClass : t_NodeClass &
        p_nodeAttributes : t_NodeAttributes_i &
        p_nodeAttributes : t_NodeAttributes &
        p_typeDefId : t_ExpandedNodeId_i &
        p_typeDefId : t_ExpandedNodeId &
        (p_nodeClass : {e_ncl_Object, e_ncl_Variable} =>
            p_typeDefId : dom(conv_ExpandedNodeId_NodeId) &
            conv_ExpandedNodeId_NodeId(p_typeDefId) : ran(a_NodeId)) &
        (p_nodeClass /: {e_ncl_Object, e_ncl_Variable} =>
            p_typeDefId = c_ExpandedNodeId_indet)
    THEN
        sc_addnode,
        d_adsp_nodes_variables
        :(
            sc_addnode : t_StatusCode_i &
            sc_addnode : {e_sc_ok, e_sc_bad_browse_name_duplicated, e_sc_bad_reference_not_allowed,
                          e_sc_bad_type_definition_invalid, e_sc_bad_out_of_memory,
                          e_sc_bad_node_class_invalid} & // BadNodeClassInvalid used for unsupported NodeClass for now
            d_adsp_nodes_invariant
        )
    END
    ;

    d_adsp_write_operation ==
    StatusCode_service <-- treat_write_request(p_user, p_locales, write_msg, resp_msg) =
    PRE
        p_user : t_user_i    &
        p_user : t_user      &
        p_locales : t_LocaleIds_i &
        p_locales : t_LocaleIds   &
        write_msg : t_msg_i  &
        write_msg = c_msg_in &
        c_msg_in : t_msg     &
        a_msg_in_type = e_msg_attribute_write_req &
        resp_msg : t_msg_i &
        resp_msg = c_msg_out &
        c_msg_out : t_msg
    THEN
        StatusCode_service,
        a_Value
        :(
            StatusCode_service       : t_StatusCode_i &
            StatusCode_service       : {e_sc_ok, e_sc_bad_nothing_to_do, e_sc_bad_too_many_ops, e_sc_bad_out_of_memory}  &
            a_Value                  : s_Node +-> t_Variant &
            dom(a_NodeClass|>{e_ncl_Variable}) <: dom(a_Value) &
            dom(a_Value) <: dom(a_NodeClass|>{e_ncl_Variable, e_ncl_VariableType})
        )
    END
    ;

    d_adsp_call_operation ==
    StatusCode_service <-- treat_method_call_request (p_user, p_endpoint_config_idx, p_req_msg, p_resp_msg) =
    PRE
        p_user    : t_user_i  &
        p_user    : t_user    &
        p_endpoint_config_idx : t_endpoint_config_idx_i &
        p_endpoint_config_idx : t_endpoint_config_idx &
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_method_call_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_method_call_resp
    THEN
        StatusCode_service,
        d_adsp_variables
        :(  StatusCode_service : t_StatusCode_i &
            StatusCode_service : t_StatusCode &
            d_adsp_invariant
        )
    END
    ;

    d_adsp_call_method_internal_operation ==
    p_rawStatusCode, p_nb_out, p_out_arguments <-- exec_callMethod(p_endpoint_config_idx, p_call_method_pointer) =
    PRE
        p_endpoint_config_idx : t_endpoint_config_idx_i &
        p_endpoint_config_idx : t_endpoint_config_idx &
        p_call_method_pointer : t_CallMethodPointer_i &
        p_call_method_pointer : t_CallMethodPointer
    THEN
        d_adsp_variables, /* Any address space change is possible */
        p_rawStatusCode,
        p_nb_out,
        p_out_arguments
        :(
            d_adsp_invariant &
            p_rawStatusCode : t_RawStatusCode &
            p_nb_out : NAT &
            p_out_arguments : t_ArgumentsPointer_i &
            (p_rawStatusCode /= c_RawStatusCode_Good =>
                p_nb_out = 0 &
                p_out_arguments = c_ArgumentsPointer_indet
            ) &
            (p_rawStatusCode = c_RawStatusCode_Good =>
                (p_nb_out > 0 =>
                 p_out_arguments : t_ArgumentsPointer)
            )
        )
    END
    ;

    d_adsp_UNINIT ==
    address_space_bs_UNINITIALISATION =
    BEGIN
        d_adsp_variables :( d_adsp_invariant )
    END
    ;

    d_adsp_operations ==
    bres <-- is_mandatory_attribute(p_ncl, p_aid) =
    PRE
        p_ncl : t_NodeClass_i &
        p_ncl : t_NodeClass &
        p_aid : t_AttributeId_i &
        p_aid : t_AttributeId
    THEN
        bres :( bres : BOOL &
                a_NodeClass_Attribute(p_ncl |-> p_aid) = bool(d_Mandatory_Attribute(p_ncl, p_aid)) &
                bres = bool(d_Mandatory_Attribute(p_ncl, p_aid))
            )
    END
    ;

    bres <-- is_AddressSpace_constant =
    BEGIN
        bres := ConstantAddressSpace
    END
    ;

    /* a_NodeClass(node) and any_attribute(node) */
    sc, val, val_sc, val_ts_src, val_ts_srv <-- read_Node_Attribute(p_user, p_locales, p_node, p_nid, p_aid, p_index_range) =
    PRE
        p_user : t_user_i &
        p_user : t_user   &
        p_locales  : t_LocaleIds_i &
        p_locales  : t_LocaleIds   &
        p_node : t_Node_i &
        p_node : s_Node &
        p_nid : t_NodeId_i &
        p_nid : t_NodeId &
        p_nid = a_NodeId(p_node) &
        p_aid : t_AttributeId_i &
        p_aid : t_AttributeId &
        p_index_range : t_IndexRange_i
    THEN
        LET ncl BE ncl = a_NodeClass(p_node) IN
        sc,
        val,
        val_sc,
        val_ts_src,
        val_ts_srv
        :(sc : t_StatusCode_i &
          sc : t_StatusCode &
          val : t_Variant_i &
          val_sc : t_RawStatusCode &
          val_ts_src : t_Timestamp &
          val_ts_srv : t_Timestamp &

          /* Specific treatement for Value attribute */
          (p_aid = e_aid_Value =>
           (ncl = e_ncl_Variable =>
             /* Specific treatement for Value of Variable attribute: check access rights + index range */
             (p_node /: s_access_read =>
                val = c_Variant_indet &
                sc = e_sc_bad_not_readable) &
             (p_node : s_access_read &
              not(e_operation_type_read |-> p_nid |-> p_aid |-> p_user : s_AuthorizedOperations) =>
                val = c_Variant_indet &
                sc = e_sc_bad_user_access_denied) &
             (p_node : s_access_read &
               e_operation_type_read |-> p_nid |-> p_aid |-> p_user : s_AuthorizedOperations &
               IsValid_VariantIndex(a_Value(p_node) |-> p_index_range) = FALSE =>
                 val = c_Variant_indet &
                 sc = e_sc_bad_index_range_invalid
             ) &
             (p_node : s_access_read &
               e_operation_type_read |-> p_nid |-> p_aid |-> p_user : s_AuthorizedOperations &
               IsValid_VariantIndex(a_Value(p_node) |-> p_index_range) = TRUE &
               HasRange_VariantIndex(a_Value(p_node) |-> p_index_range) = FALSE  =>
                 val = c_Variant_indet &
                 sc = e_sc_bad_index_range_no_data
             ) &
             (p_node : s_access_read &
               e_operation_type_read |-> p_nid |-> p_aid |-> p_user : s_AuthorizedOperations &
               IsValid_VariantIndex(a_Value(p_node) |-> p_index_range) = TRUE &
               HasRange_VariantIndex(a_Value(p_node) |-> p_index_range) = TRUE =>
                /* FIXME: Should depend on the index range? */
                (val = a_Value(p_node) & sc = e_sc_ok) or
                (val = c_Variant_indet & sc = e_sc_bad_out_of_memory)
             )
           ) &

           /* Specific treatement for Value of VariableType attribute: check index range */
           (ncl = e_ncl_VariableType =>
             (IsValid_VariantIndex(a_Value(p_node) |-> p_index_range) = FALSE =>
                val = c_Variant_indet &
                sc = e_sc_bad_index_range_invalid
             ) &
             (IsValid_VariantIndex(a_Value(p_node) |-> p_index_range) = TRUE &
              HasRange_VariantIndex(a_Value(p_node) |-> p_index_range) = FALSE =>
                val = c_Variant_indet &
                sc = e_sc_bad_index_range_no_data
             ) &
             (IsValid_VariantIndex(a_Value(p_node) |-> p_index_range) = TRUE &
              HasRange_VariantIndex(a_Value(p_node) |-> p_index_range) = TRUE =>
               /* FIXME: Should depend on the index range? */
               (val = a_Value(p_node) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory)
             )
           ) &

           /* Any other node class does not carry a Value attribute */
           (ncl /: {e_ncl_Variable, e_ncl_VariableType} =>
             val = c_Variant_indet &
             sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          /* All the other attributes are on the same model */

          (p_aid = e_aid_AccessLevel =>
           (p_node : dom(a_AccessLevel) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_AccessLevel_Variant(a_AccessLevel(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_AccessLevel) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_BrowseName =>
           (p_node : dom(a_BrowseName) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_QualifiedName_Variant(a_BrowseName(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_BrowseName) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_ContainsNoLoops =>
           (p_node : dom(a_ContainsNoLoops) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Boolean_Variant(a_ContainsNoLoops(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_ContainsNoLoops) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_DataType =>
           (p_node : dom(a_DataType) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_NodeId_Variant(a_DataType(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_DataType) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_DisplayName =>
           (p_node : dom(a_DisplayName) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_LocalizedText_Variant(a_DisplayName(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_DisplayName) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_EventNotifier =>
           (p_node : dom(a_EventNotifier) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Byte_Variant(a_EventNotifier(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_EventNotifier) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_Executable =>
           (p_node : dom(a_Executable) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Boolean_Variant(a_Executable(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_Executable) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_Historizing =>
           (p_node : dom(a_Historizing) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Boolean_Variant(a_Historizing(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_Historizing) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_IsAbstract =>
           (p_node : dom(a_IsAbstract) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Boolean_Variant(a_IsAbstract(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_IsAbstract) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_NodeClass =>
           (p_node : dom(a_NodeClass) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_NodeClass_Variant(a_NodeClass(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_NodeClass) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_NodeId =>
           (p_node : dom(a_NodeId) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_NodeId_Variant(a_NodeId(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_NodeId) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_Symmetric =>
           (p_node : dom(a_Symmetric) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Boolean_Variant(a_Symmetric(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_Symmetric) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_UserAccessLevel =>
           (p_node : dom(a_UserAccessLevel) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_AccessLevel_Variant(a_UserAccessLevel(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_UserAccessLevel) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_UserExecutable =>
           (p_node : dom(a_UserExecutable) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_Boolean_Variant(a_UserExecutable(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_UserExecutable) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_ValueRank =>
           (p_node : dom(a_ValueRank) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_ValueRank_Variant(a_ValueRank(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_ValueRank) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          (p_aid = e_aid_ArrayDimensions =>
           (p_node : dom(a_ArrayDimensions) =>
             (IsRangeDefined(p_index_range) = TRUE =>
               val = c_Variant_indet & sc = e_sc_bad_index_range_no_data) &
             (IsRangeDefined(p_index_range) = FALSE =>
               (val = conv_ArrayDimensions_Variant(a_ArrayDimensions(p_node)) & sc = e_sc_ok) or
               (val = c_Variant_indet & sc = e_sc_bad_out_of_memory))
           ) &
           (p_node /: dom(a_ArrayDimensions) =>
             val = c_Variant_indet & sc = e_sc_bad_attribute_id_invalid
           )
          ) &

          /* Any other attribute */
          (p_aid /: {e_aid_AccessLevel,
                     e_aid_BrowseName,
                     e_aid_ContainsNoLoops,
                     e_aid_DataType,
                     e_aid_DisplayName,
                     e_aid_EventNotifier,
                     e_aid_Executable,
                     e_aid_Historizing,
                     e_aid_IsAbstract,
                     e_aid_NodeClass,
                     e_aid_NodeId,
                     e_aid_Symmetric,
                     e_aid_UserAccessLevel,
                     e_aid_UserExecutable,
                     e_aid_Value,
                     e_aid_ValueRank,
                     e_aid_ArrayDimensions} =>
             val = c_Variant_indet &
             sc = e_sc_bad_attribute_id_invalid
          ) &

          /* Specific treatement for status code and timestamps for Variable Value */
          (sc = e_sc_ok =>
            (ncl = e_ncl_Variable & p_aid = e_aid_Value =>
               val_sc = a_Value_StatusCode(p_node) &
               val_ts_src = a_Value_SourceTimestamp(p_node) &
               val_ts_srv /= c_Timestamp_null /* current date on S2OPC server*/ ) &
            /* Generic treatement for status code and timestamps     */
            (not(ncl = e_ncl_Variable & p_aid = e_aid_Value) =>
               val_sc = c_RawStatusCode_Good &
               val_ts_src = c_Timestamp_null &
               val_ts_srv /= c_Timestamp_null /* current date on S2OPC server*/)
          ) &
          (sc /= e_sc_ok =>
            val_sc = c_RawStatusCode_BadInvalidState &
            val_ts_src = c_Timestamp_null &
            val_ts_srv /= c_Timestamp_null /* current date on S2OPC server*/)
       )
    END /* LET END */
    END
    ;

    /* Promoted */
    /* a_NodeId~ */
    nid_valid, node <-- readall_AddressSpace_Node(nid) =
    PRE
        nid : t_NodeId_i
    THEN
        IF  nid : ran(a_NodeId) THEN
            nid_valid := TRUE ||
            node :( node : t_Node_i & node|->nid : a_NodeId )
        ELSE
            nid_valid := FALSE ||
            node := c_Node_indet
        END
    END
    ;

    p_node_class <-- get_NodeClass(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : t_Node
    THEN
        p_node_class :(p_node_class : t_NodeClass_i &
                       p_node_class = a_NodeClass(p_node))
    END
    ;

    p_browse_name <-- get_BrowseName(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : t_Node
    THEN
        p_browse_name :(p_browse_name : t_QualifiedName_i &
                        p_browse_name = a_BrowseName(p_node))
    END
    ;

    p_display_name <-- get_DisplayName(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : t_Node
    THEN
        p_display_name :(p_display_name : t_LocalizedText_i &
                         p_display_name = a_DisplayName(p_node))
    END
    ;

    p_byte <-- get_EventNotifier(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : dom(a_EventNotifier)
    THEN
        p_byte := a_EventNotifier(p_node)
    END
    ;

    /* Types */
    bres <-- is_transitive_subtype(p_subtype, p_parent_type) =
    PRE
        p_subtype : t_NodeId_i &
        p_subtype : t_NodeId &
        p_parent_type : t_NodeId_i &
        p_parent_type : t_NodeId
    THEN
        bres := bool(p_subtype |-> p_parent_type : Type_IsTransitiveSubtype)
    END
    ;

    bres <-- is_valid_ReferenceTypeId(p_nodeId) =
    PRE
        p_nodeId : t_NodeId_i &
        p_nodeId : t_NodeId
    THEN
        bres := bool(p_nodeId : Type_IsReferenceTypeIdValid)
    END
    ;

    bres <-- is_NodeId_equal(nid1, nid2) =
    PRE
        nid1 : t_NodeId_i &
        nid1 : t_NodeId &
        nid2 : t_NodeId_i &
        nid2 : t_NodeId
    THEN
        bres := bool(nid1 = nid2)
    END
    ;

    /* References */

    p_type_def <-- get_TypeDefinition(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : s_Node   &
        p_node : dom(Ref_HasTypeDefinition)
    THEN
        p_type_def :(p_type_def : t_ExpandedNodeId_i &
                     p_type_def = Ref_HasTypeDefinition(p_node))
    END
    ;

    p_RefType <-- get_Reference_ReferenceType(p_ref) =
    PRE
        p_ref : t_Reference_i &
        p_ref : t_Reference
    THEN
        p_RefType
        :(  p_RefType : t_NodeId_i &
            p_RefType = Reference_ReferenceType(p_ref)
         )
    END
    ;

    p_TargetNode <-- get_Reference_TargetNode(p_ref) =
    PRE
        p_ref : t_Reference_i &
        p_ref : t_Reference
    THEN
        p_TargetNode
        :(
            p_TargetNode : t_ExpandedNodeId_i &
            p_TargetNode = Reference_TargetNode(p_ref)
         )
    END
    ;

    p_IsForward <-- get_Reference_IsForward(p_ref) =
    PRE
        p_ref : t_Reference_i &
        p_ref : t_Reference
    THEN
        p_IsForward := Reference_IsForward(p_ref)
    END
    ;

    p_ref_index <-- get_Node_RefIndexEnd(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : t_Node
    THEN
        p_ref_index :(
            p_ref_index : NAT &
            p_ref_index = Node_RefIndexEnd(p_node)
        )
    END
    ;

    p_ref <-- get_RefIndex_Reference(p_node, p_ref_index) =
    PRE
        p_node : t_Node_i &
        p_node : s_Node &
        p_ref_index : NAT1 &
        p_ref_index : t_RefIndex &
        Node_RefIndexEnd(p_node) >= p_ref_index
    THEN
        p_ref :(p_ref : t_Reference_i &
                p_ref = RefIndex_Reference(p_node |-> p_ref_index))
    END
    ;

    /* Promoted */
    sc <-- get_Value_StatusCode(p_user, node) =
    PRE
        p_user : t_user_i &
        p_user : t_user   &
        node : t_Node_i &
        node : s_Node &
        a_NodeClass(node) = e_ncl_Variable
    THEN
        sc := a_Value_StatusCode(node)
    END
    ;

    /* Promoted */
    read_AddressSpace_clear_value(val) =
    PRE
        val : t_Variant_i
    THEN
        skip
    END
    ;

    /* Frees a value previously malloced with read_AddressSpace_Attribute_value */
    read_AddressSpace_free_variant(val) =
    PRE
        val : t_Variant_i
    THEN
        skip
    END
    ;

    p_res <-- is_local_service_treatment =
    BEGIN
        p_res := local_service_treatment
    END
    ;

    set_local_service_treatment(p_val) =
    PRE
        p_val : BOOL
    THEN
        local_service_treatment := p_val
    END
    ;

    p_authorized <-- get_user_authorization (p_operation_type, p_node_id, p_attribute_id, p_user) =
    PRE
        p_operation_type : t_operation_type_i &
        p_operation_type : t_operation_type   &
        p_node_id        : t_NodeId_i         &
        p_node_id        : t_NodeId           &
        p_attribute_id   : t_AttributeId_i    &
        p_attribute_id   : t_AttributeId      &
        p_user           : t_user_i           &
        p_user           : t_user
    THEN
        p_authorized := bool(p_operation_type |-> p_node_id |-> p_attribute_id |-> p_user : s_AuthorizedOperations)
    END
    ;

    bres <-- has_access_level_executable(node) =
    PRE
        node : t_Node_i &
        node : s_Node
    THEN
        bres := bool(node : s_executable)
    END
    ;

    p_input_arg <-- get_InputArguments(p_node) =
    PRE
        p_node : t_Node_i &
        p_node : dom(a_NodeClass) &
        a_NodeClass(p_node) = e_ncl_Method
    THEN
        p_input_arg :: t_Variant_i
    END
    ;

    p_valueRank <-- get_conv_Variant_ValueRank(p_variant) =
    PRE
        p_variant : t_Variant_i &
        p_variant : t_Variant
    THEN
        p_valueRank := Variant_ValueRank(p_variant)
    END
    ;

    p_type <-- get_conv_Variant_Type(p_variant) =
    PRE
        p_variant : t_Variant_i &
        p_variant : t_Variant
    THEN
        p_type :( p_type : t_NodeId_i & p_type = Variant_LocalDataType(p_variant))
    END
    ;

    /* Computes if DataValue has a compatible type or compatible subtype */
    btyp_ok, btyp_need_conv <-- read_variable_compat_type(p_dv_typ_nid, p_dv_vr, p_var_typ_nid, p_var_vr) =
    PRE
        p_dv_typ_nid : t_NodeId_i &
        p_dv_vr : t_ConcreteValueRank &
        p_var_typ_nid : t_NodeId_i &
        p_var_typ_nid : t_NodeId &
        p_var_vr : t_ValueRank
    THEN
        btyp_ok :: BOOL ||
        btyp_need_conv :: BOOL
    END
    ;

    p_bool <-- check_object_has_method(p_object, p_method) =
    PRE
        p_method : t_NodeId_i &
        p_method : t_NodeId   &
        p_object : t_NodeId_i &
        p_object : t_NodeId
    THEN
        p_bool := bool(p_object |-> p_method : Object_HasMethod)
    END
    ;

    statusCode, node <-- check_nodeId_isValid(nodeid)=
    PRE
        nodeid : t_NodeId_i &
        nodeid : t_NodeId
    THEN
        IF nodeid = c_NodeId_indet
        THEN
            statusCode := e_sc_bad_node_id_invalid ||
            node := c_Node_indet
        ELSIF nodeid /: dom(a_NodeId~)
        THEN
            statusCode := e_sc_bad_node_id_unknown ||
            node := c_Node_indet
        ELSE
            statusCode := e_sc_ok ||
            node := a_NodeId~(nodeid)
        END
    END
    ;

    bres <-- is_IndexRangeDefined(p_index_range) =
    PRE
        p_index_range : t_IndexRange_i
    THEN
        bres :: BOOL
    END
