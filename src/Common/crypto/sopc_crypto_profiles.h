/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/** \file
 *
 * \brief Defines the cryptographic profiles: constants and struct.
 *
 * \note The constants defined in this file are mainly based on the test specification (Part 7).
 */

#ifndef SOPC_CRYPTO_PROFILES_H_
#define SOPC_CRYPTO_PROFILES_H_

#include "sopc_crypto_decl.h"
#include "sopc_enums.h"

// s2opc_common_export.h is generated by CMake, when not using CMake, copy and include
// "src/Common/helpers_platform_dep/<platform>/s2opc_common_export.h_"
#include "s2opc_common_export.h"

// Client-server security policies

// Crypto profiles uri and ID
typedef enum SOPC_SecurityPolicy_ID
{
    SOPC_SecurityPolicy_Invalid_ID = 0,
    SOPC_SecurityPolicy_Basic256Sha256_ID = 1,
    SOPC_SecurityPolicy_Basic256_ID = 2,
    SOPC_SecurityPolicy_None_ID = 3,
    SOPC_SecurityPolicy_PubSub_Aes256_ID = 4,
    SOPC_SecurityPolicy_Aes128Sha256RsaOaep_ID = 5,
    SOPC_SecurityPolicy_Aes256Sha256RsaPss_ID = 6,
    SOPC_SecurityPolicy_Last_ID
} SOPC_SecurityPolicy_ID;

#define SOPC_SecurityPolicy_Basic256Sha256_URI "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256"
#define SOPC_SecurityPolicy_Basic256_URI "http://opcfoundation.org/UA/SecurityPolicy#Basic256"
#define SOPC_SecurityPolicy_None_URI "http://opcfoundation.org/UA/SecurityPolicy#None"
#define SOPC_SecurityPolicy_PubSub_Aes256_URI "http://opcfoundation.org/UA/SecurityPolicy#PubSub-Aes256-CTR"
#define SOPC_SecurityPolicy_Aes128Sha256RsaOaep_URI "http://opcfoundation.org/UA/SecurityPolicy#Aes128_Sha256_RsaOaep"
#define SOPC_SecurityPolicy_Aes256Sha256RsaPss_URI "http://opcfoundation.org/UA/SecurityPolicy#Aes256_Sha256_RsaPss"

#define SOPC_SecurityPolicy_Basic256Sha256_URI_SignAlgo "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
#define SOPC_SecurityPolicy_Aes128Sha256RsaOaep_URI_SignAlgo "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
#define SOPC_SecurityPolicy_Aes256Sha256RsaPss_URI_SignAlgo "http://opcfoundation.org/UA/security/rsa-pss-sha2-256"
#define SOPC_SecurityPolicy_Basic256_URI_SignAlgo "http://www.w3.org/2000/09/xmldsig#rsa-sha1"

typedef struct SOPC_SecurityPolicy_Config
{
    const char* uri;
    const bool isInvalid; /**< True for "Invalid" configuration (SOPC_SecurityPolicy_Invalid_ID) */
    const char* name;     /**< A human-readable short name */
    const SOPC_CryptoProfile* (*profile)(const char* uri);
    const SOPC_CryptoProfile_PubSub* (*psProfile)(const char* uri);
    uint8_t secuPolicyWeight;          /**< 0 = less secure */
    uint32_t symmLen_CryptoKey;        /**< Length (Bytes) of symmetric signature encryption key. O if not supported. */
    uint32_t symmLen_SignKey;          /**< Length (Bytes) of symmetric signature signing key. O if not supported. */
    uint32_t symmLen_Signature;        /**< Length (Bytes) of symmetric signature. O if not supported. */
    uint32_t symmLen_Block;            /**< Length (Bytes) of blocs for symmetric encryption. O if not supported. */
    uint32_t symmLen_KeyNonce;         /**< Length (Bytes) of Nonce for symmetric key. 0 if not supported */
    uint32_t symmLen_MessageRandom;    /**< Length (Bytes) of Random message for symmetric key. 0 if not supported */
    uint32_t asymLen_OAEP_Hash;        /**< Length (Bytes) of asymmetric OAEP Hash */
    uint32_t asymLen_KeyMinBits;       /**< Minimum length (Bytes) of asymmetric keys. 0 if unused*/
    uint32_t asymLen_KeyMaxBits;       /**< Maximum length (Bytes) of asymmetric keys. 0 if unused*/
    uint32_t secureChannelNonceLength; /**< Length (Bytes) of Nonce for Secure Channel. 0 if not supported */
    uint32_t certLen_Thumbprint;       /**< Length (Bytes) of Thumbprint */
    const char* URI_SignAlgo;          /**< URI if Signature algorithm */
} SOPC_SecurityPolicy_Config;

/** Get the configuration of the given security policy
 This function never returns NULL, and a caller does not need to check this result.
 In case of invalid arguments the returned value will point to the configuration of ::SOPC_SecurityPolicy_Invalid_ID*/
const SOPC_SecurityPolicy_Config* SOPC_SecurityPolicy_Config_Get(SOPC_SecurityPolicy_ID policyId);

// API
const SOPC_SecurityPolicy_Config* SOPC_CryptoProfile_Get(const char* uri);
const SOPC_CryptoProfile_PubSub* SOPC_CryptoProfile_PubSub_Get(const char* uri);

/* ------------------------------------------------------------------------------------------------
 * Internal CryptoProfile function pointers.
 * ------------------------------------------------------------------------------------------------
 */
typedef SOPC_ReturnStatus FnSymmetricEncrypt(const SOPC_CryptoProvider* pProvider,
                                             const uint8_t* pInput,
                                             uint32_t lenPlainText,
                                             const SOPC_ExposedBuffer* pKey,
                                             const SOPC_ExposedBuffer* pIV,
                                             uint8_t* pOutput,
                                             uint32_t lenOutput);
typedef SOPC_ReturnStatus FnSymmetricDecrypt(const SOPC_CryptoProvider* pProvider,
                                             const uint8_t* pInput,
                                             uint32_t lenCipherText,
                                             const SOPC_ExposedBuffer* pKey,
                                             const SOPC_ExposedBuffer* pIV,
                                             uint8_t* pOutput,
                                             uint32_t lenOutput);
typedef SOPC_ReturnStatus FnSymmetricSign(const SOPC_CryptoProvider* pProvider,
                                          const uint8_t* pInput,
                                          uint32_t lenInput,
                                          const SOPC_ExposedBuffer* pKey,
                                          uint8_t* pOutput);
typedef SOPC_ReturnStatus FnSymmetricVerify(const SOPC_CryptoProvider* pProvider,
                                            const uint8_t* pInput,
                                            uint32_t lenInput,
                                            const SOPC_ExposedBuffer* pKey,
                                            const uint8_t* pSignature);
typedef SOPC_ReturnStatus FnGenerateRandom(const SOPC_CryptoProvider* pProvider,
                                           SOPC_ExposedBuffer* pData,
                                           uint32_t lenData);
typedef SOPC_ReturnStatus FnDerivePseudoRandomData(const SOPC_CryptoProvider* pProvider,
                                                   const SOPC_ExposedBuffer* pSecret,
                                                   uint32_t lenSecret,
                                                   const SOPC_ExposedBuffer* pSeed,
                                                   uint32_t lenSeed,
                                                   SOPC_ExposedBuffer* pOutput,
                                                   uint32_t lenOutput);
typedef SOPC_ReturnStatus FnAsymmetricEncrypt(const SOPC_CryptoProvider* pProvider,
                                              const uint8_t* pInput,
                                              uint32_t lenPlainText,
                                              const SOPC_AsymmetricKey* pKey,
                                              uint8_t* pOutput);
typedef SOPC_ReturnStatus FnAsymmetricDecrypt(const SOPC_CryptoProvider* pProvider,
                                              const uint8_t* pInput,
                                              uint32_t lenCipherText,
                                              const SOPC_AsymmetricKey* pKey,
                                              uint8_t* pOutput,
                                              uint32_t* lenWritten);
typedef SOPC_ReturnStatus FnAsymmetricSign(const SOPC_CryptoProvider* pProvider,
                                           const uint8_t* pInput,
                                           uint32_t lenInput,
                                           const SOPC_AsymmetricKey* pKey,
                                           uint8_t* pSignature);
typedef SOPC_ReturnStatus FnAsymmetricVerify(const SOPC_CryptoProvider* pProvider,
                                             const uint8_t* pInput,
                                             uint32_t lenInput,
                                             const SOPC_AsymmetricKey* pKey,
                                             const uint8_t* pSignature);

typedef SOPC_ReturnStatus FnPubSubCrypt(const SOPC_CryptoProvider* pProvider,
                                        const uint8_t* pInput,
                                        uint32_t lenInput,
                                        const SOPC_ExposedBuffer* pKey,
                                        const SOPC_ExposedBuffer* pKeyNonce,
                                        const SOPC_ExposedBuffer* pRandom,
                                        uint32_t uSequenceNumber,
                                        uint8_t* pOutput);

/* ------------------------------------------------------------------------------------------------
 * The CryptoProfile definitions
 * ------------------------------------------------------------------------------------------------
 */

/**
 * \brief   SOPC_CryptoProfiles gather pointers to cryptographic functions of the security policies of OPC UA Services.
 *
 * Crypto profiles are defined as struct of pointers. These immutable struct are extern and const, because they are
 * lib-specific (hence SOPC_CryptoProfile_Get and these variables are in different translation units).
 * SOPC_CryptoProfile should be accessed through SOPC_CryptoProfile_Get ONLY, and should not be modified,
 * as multiple calls to SOPC_CryptoProfile_Get returns the same instance.
 *
 * This crypto profile only handles the OPC UA Services security policies.
 * See SOPC_CryptoProfile_PubSub for the PubSub security policies.
 */
struct SOPC_CryptoProfile
{
    const SOPC_SecurityPolicy_ID SecurityPolicyID;
    FnSymmetricEncrypt* const pFnSymmEncrypt;
    FnSymmetricDecrypt* const pFnSymmDecrypt;
    FnSymmetricSign* const pFnSymmSign;
    FnSymmetricVerify* const pFnSymmVerif;
    FnGenerateRandom* const pFnGenRnd;
    FnDerivePseudoRandomData* const pFnDeriveData;
    FnAsymmetricEncrypt* const pFnAsymEncrypt;
    FnAsymmetricDecrypt* const pFnAsymDecrypt;
    FnAsymmetricSign* const pFnAsymSign;
    FnAsymmetricVerify* const pFnAsymVerify;
};

/**
 * \brief   SOPC_CryptoProfiles_PubSub gather pointers to cryptographic functions of the security policies of OPC UA
 * PubSub.
 *
 * Crypto profiles are defined as struct of pointers. These immutable struct are extern and const, because they are
 * lib-specific (hence SOPC_CryptoProfile_PubSub_Get and these variables are in different translation units).
 * SOPC_CryptoProfile_PubSub should be accessed through SOPC_CryptoProfile_PubSub_Get ONLY, and should not be modified,
 * as multiple calls to SOPC_CryptoProfile_PubSub_Get returns the same instance.
 */
struct SOPC_CryptoProfile_PubSub
{
    const uint32_t SecurityPolicyID;
    FnPubSubCrypt* const pFnCrypt;
    FnSymmetricSign* const pFnSymmSign;
    FnSymmetricVerify* const pFnSymmVerif;
    FnGenerateRandom* const pFnGenRnd;
};

#endif /* SOPC_CRYPTO_PROFILES_H_ */
