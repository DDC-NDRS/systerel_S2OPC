/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef CHECK_FILE_TRANSFER_METHOD_H_
#define CHECK_FILE_TRANSFER_METHOD_H_

#include "libs2opc_client.h"

#define INVALID_FILE_HANDLE 0x0u
#define INVALID_POSITION 0xFFFFFFFFFFFFFFFFu

// Item1 values
#define ITEM_1_PATH "./toolkit_test_server_file_transfer_logs/item1File.log"
#define NODEID_ITEM1 "ns=1;i=15472"
#define NODEID_FILE_TYPE_ITEM1 "ns=1;i=15478"
#define NODEID_MET_OPEN_ITEM1 "ns=1;i=15484"
#define NODEID_MET_CLOSE_ITEM1 "ns=1;i=15487"
#define NODEID_MET_READ_ITEM1 "ns=1;i=15489"
#define NODEID_MET_WRITE_ITEM1 "ns=1;i=15492"
#define NODEID_MET_GETPOS_ITEM1 "ns=1;i=15494"
#define NODEID_MET_SETPOS_ITEM1 "ns=1;i=15497"
#define NODEID_VAR_SIZE_ITEM1 "ns=1;i=15479"
#define NODEID_VAR_OPEN_COUNT_ITEM1 "ns=1;i=15482"
#define NODEID_VAR_USER_WRITABLE_ITEM1 "ns=1;i=15481"
#define NODEID_VAR_WRITABLE_ITEM1 "ns=1;i=15480"
// Item2 values
#define ITEM_2_PATH "./toolkit_test_server_file_transfer_logs/item2File.log"
#define NODEID_ITEM2 "ns=1;i=15523"
#define NODEID_FILE_TYPE_ITEM2 "ns=1;i=15529"
#define NODEID_MET_OPEN_ITEM2 "ns=1;i=15535"
#define NODEID_MET_CLOSE_ITEM2 "ns=1;i=15538"
#define NODEID_MET_READ_ITEM2 "ns=1;i=15540"
#define NODEID_MET_WRITE_ITEM2 "ns=1;i=15543"
#define NODEID_MET_GETPOS_ITEM2 "ns=1;i=15545"
#define NODEID_MET_SETPOS_ITEM2 "ns=1;i=15548"
#define NODEID_VAR_SIZE_ITEM2 "ns=1;i=15530"
#define NODEID_VAR_OPEN_COUNT_ITEM2 "ns=1;i=15533"
#define NODEID_VAR_USER_WRITABLE_ITEM2 "ns=1;i=15532"
#define NODEID_VAR_WRITABLE_ITEM2 "ns=1;i=15531"

/**
 * \brief Open a file with a specific mode and return a file handle.
 * \param scConnection  secured connection of the client .
 * \param bIsItem1      Whether the file is found under item1 otherwise under item2
 * \param callResponse  Pointer to the CallResponse allocated by methodCall, it contains the result of the method call.
 *                      Shall point to NULL pointer
 * \param mode          The selected mode of the file:
 *                          - bit 0 : The file is opened for reading. If this bit is not set the Read Method cannot be
 *                              executed.
 *
 *                          - bit 1 : The file is opened for writing. If this bit is not set the Write Method cannot be
 *                              executed.
 *
 *                          - bit 2 : This bit can only be set if the file is opened for writing (Write bit is set).
 *                              The existing content of the file is erased and an empty file is provided.
 *
 *                          - bit 3 : When the Append bit is set the file is opened at end of the file, otherwise at
 *                              begin of the file. The SetPosition Method can be used to change the position.
 *
 * \return uint32_t fileHandle. The fileHandle is generated by the server and is unique for the Session.
 *         The fileHandle is equal to 0 if an error occurs.
 */
uint32_t SOPC_TEST_FileTransfer_OpenMethod(SOPC_ClientConnection* scConnection,
                                           const bool bIsItem1,
                                           OpcUa_CallResponse** callResponse,
                                           SOPC_Byte mode);

/**
 * \brief Close a file thanks to fileHandle. Then the fileHandle becomes invalid.
 * \param scConnection  secured connection of the client .
 * \param bIsItem1      Whether the file is found under item1 otherwise under item2
 * \param callResponse  Pointer to the CallResponse allocated by methodCall, it contains the result of the method call.
 *                      Shall point to NULL pointer
 * \param fileHandle    fileHandle given by the open method
 */
void SOPC_TEST_FileTransfer_CloseMethod(SOPC_ClientConnection* scConnection,
                                        const bool bIsItem1,
                                        OpcUa_CallResponse** callResponse,
                                        uint32_t fileHandle);

/**
 * \brief Write bytes from the current position in the file. Moves the cursor from X number of bytes.
 * \param scConnection  secured connection of the client .
 * \param bIsItem1      Whether the file is found under item1 otherwise under item2
 * \param callResponse  Pointer to the CallResponse allocated by methodCall, it contains the result of the method call.
 *                      Shall point to NULL pointer
 * \param fileHandle    fileHandle given by the open method
 * \param dataToWrite   String Data to be written in the file in byte size.
 */
void SOPC_TEST_FileTransfer_WriteMethod(SOPC_ClientConnection* scConnection,
                                        const bool bIsItem1,
                                        OpcUa_CallResponse** callResponse,
                                        uint32_t fileHandle,
                                        SOPC_ByteString* dataToWrite);

/**
 * \brief Read bytes from the current position in the file.
 * \param scConnection  secured connection of the client .
 * \param bIsItem1      Whether the file is found under item1 otherwise under item2.
 * \param callResponse  Pointer to the CallResponse allocated by methodCall, it contains the result of the method call.
 *                      Shall point to NULL pointer.
 * \param fileHandle    fileHandle given by the open method.
 * \param length        number of bytes to read in byte size.
 */
void SOPC_TEST_FileTransfer_ReadMethod(SOPC_ClientConnection* scConnection,
                                       const bool bIsItem1,
                                       OpcUa_CallResponse** callResponse,
                                       uint32_t fileHandle,
                                       int32_t length);

/**
 * \brief Set the current position to a specific position in the file.
 * \param scConnection  secured connection of the client .
 * \param bIsItem1      Whether the file is found under item1 otherwise under item2.
 * \param callResponse  Pointer to the CallResponse allocated by methodCall, it contains the result of the method call.
 *                      Shall point to NULL pointer.
 * \param fileHandle    fileHandle given by the open method.
 * \param position      Position to set in the file.
 */
void SOPC_TEST_FileTransfer_SetPositionMethod(SOPC_ClientConnection* scConnection,
                                              const bool bIsItem1,
                                              OpcUa_CallResponse** callResponse,
                                              uint32_t fileHandle,
                                              uint64_t position);

/**
 * \brief Get the current position of the cursor in the file.
 * \param scConnection  secured connection of the client .
 * \param bIsItem1      Whether the file is found under item1 otherwise under item2.
 * \param callResponse  Pointer to the CallResponse allocated by methodCall, it contains the result of the method call.
 *                      Shall point to NULL pointer.
 * \param fileHandle    fileHandle given by the open method.
 *
 * \return the current position of the cursor in the file. The position is equal to 0xFFFFFFFFFFFFFFFF if an error
 * occurs.
 */
uint64_t SOPC_TEST_FileTransfer_GetPositionMethod(SOPC_ClientConnection* scConnection,
                                                  const bool bIsItem1,
                                                  OpcUa_CallResponse** callResponse,
                                                  uint32_t fileHandle);

#endif /* CHECK_FILE_TRANSFER_METHOD_H_ */
